- Class: meta
  Course: Ciencia de datos con R
  Lesson: data_transformation
  Author: Carlos Roberto Flores
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3


- Class: text
  Output: Antes de comenzar a vizualisar y modelar con nuestros datos es necesarios manipularlos y conocerlos perfectamente.

- Class: text
  Output: Una paqueteria util para familiarizarnos con estas habilidades es dplyr. Nos ayudara a resumir, operar, limpiar, filtrar, unir, etc. Bases de datos en R.
          
- Class: cmd_question
  Output: Ejecuta; library(dplyr) 
  CorrectAnswer: library(dplyr)
  AnswerTests: omnitest(correctExpr='library(dplyr)')
  Hint: Ejecuta; library(dplyr)

- Class: cmd_question
  Output: Dentro de R existen varios datos precargador para practicar. Ejecuta; diamonds
  CorrectAnswer: diamonds
  AnswerTests: omnitest(correctExpr='diamonds')
  Hint: Ejecuta; diamonds

- Class: cmd_question
  Output: Antes de adentrarnos a trabajar con funciones de dplyr veamos funciones exploratorias basicas. Ejecuta; head(diamonds)
  CorrectAnswer: head(diamonds)
  AnswerTests: omnitest(correctExpr='head(diamonds)')
  Hint: Ejecuta; head(diamonds)

- Class: cmd_question
  Output: names(diamonds)
  CorrectAnswer: names(diamonds)
  AnswerTests: omnitest(correctExpr='names(diamonds)')
  Hint: Ejecuta; names(diamonds)

- Class: cmd_question
  Output: dim(diamonds)
  CorrectAnswer: dim(diamonds)
  AnswerTests: omnitest(correctExpr='dim(diamonds)')
  Hint: Ejecuta; dim(diamonds)

- Class: cmd_question
  Output: str(diamonds)
  CorrectAnswer: str(diamonds)
  AnswerTests: omnitest(correctExpr='str(diamonds)')
  Hint: Ejecuta; str(diamonds)

- Class: text
  Output: Te habras percatado que vimos el encabezado (head()), nombres columnas (names()), dimensiones numero de filas y columnas dim(), tipos de datos str()

- Class: text
  Output: Existen mas funciones nativas de R. Coloca en tu buscador, https://www.rstudio.com/wp-content/uploads/2016/10/r-cheat-sheet-3.pdf

- Class: text
  Output: Comenzemos a trabajar con dplyr.

- Class: text
  Output: Uno de los conceptos básicos para manejar un conjunto de datos, es el comando filter(). La función nos ayuda a encontrar un grupo de datos en especifico.

- Class: text
  Output: Al momento de hacer una busqueda, le tenemos que pasar los parametros de busqueda,n el primer parametro va el nombre del conjunto de datos analizados, los otros dos parametros son los de busqueda especifica que puede ser por mes, año,etc.
          
- Class: cmd_question
  Output: Filtremos sobre nuestro marco de datos flights. Ejecuta; filter(diamonds, price > 60 & price > 320)
  CorrectAnswer: filter(diamonds, price > 60 & price > 320)
  AnswerTests: omnitest(correctExpr='filter(diamonds, price > 60 & price > 320)')
  Hint: Ejecuta; filter(diamonds, price > 60 & price > 320)

- Class: text
  Output: Como puedes ver, esta función despliega un nuevo marco de un conjunto de datos con las expreciones que fueron especificadas en la función filter(), para guardar este nuevo conjunto de datos lo tenemos que hacer mediante una variable.

- Class: text
  Output: Una caracteristica importante de R que puede dificultar la comparación es la falta de valores(o valores perdidos "NA"), ya que cualquier operacion con un valor desconocido también será desconocido.

- Class: text
  Output: Para hacer busqueda en el conjunto de datos de un dato vacio, usamos la función is.na(), como parametro recibirá la variable en donde almacenamos los datos que queremos analizar.Este mismo funciona como un parametro de busqueda al utilizar la función filtro.

- Class: text
  Output:  Ejemplo de esto seria filter(df, is.na(x) | x > 1)

- Class: text
  Output: La función arrange funciona igual que filter; a diferencia de filter, arrange reordena las coumnas. utiliza los parametros para ordenar los datos, por ejemplo, si queremos ordenar los datos por año, mes y día, estos tres se los pasamos como parametros a la función si olvidar que primero va el nombre de la variable que contiene los datos que vamos a ordenar.

- Class: text
  Output: Podemos utilizar el parametro desc("nombre de la columna"), para ordenar el conjunto de datos en forma decendente.

- Class: cmd_question
  Output: Ordenemos el conjunto diamonds por la columna price. Ejecuta; arrange(diamonds, desc(price))
  CorrectAnswer: arrange(diamonds, desc(price))
  AnswerTests: omnitest(correctExpr='arrange(diamonds, desc(price))')
  Hint: Ejecuta; arrange(diamonds, desc(price))

- Class: text
  Output: Otra función de ayuda para manipular los datos es *selec(), nos permite acercarnos rápidamente a un subconjunto útil utilizando operaciones basadas en los nombres de las variables del conjunto de datos.

- Class: text
  Output: Bien ahora pasemos a la practica, como en las funciones anteriores, a esta función le puedes pasar como parametros del nombre de las variables de los datos que quieras analizar.

- Class: cmd_question
  Output: Selecciona algunas variables, Ejecuta; select(diamonds, cut, color, price)
  CorrectAnswer: select(diamonds, cut, color, price)
  AnswerTests: omnitest(correctExpr='select(diamonds, cut, color, price)')
  Hint: Ejecuta; select(diamonds, cut, color, price)

- Class: text
  Output: Hay una serie de auxiliares que puedes usar dentro de selec().De los cuales esta starts_with(), este parametro nos busca en el marco de datos, nombres que inicien con las iniciales que nosotros le asignemos; ends_with(), este parametro busca los nombres que terminen con las letras asignadas; contains(), este parametro nos busja las variables o datos que contengan las letras asignadas; matches() este parametro en particular busca variables que contengan la expresión asignada y por ultimo num_range(), nos sirve para buscar variables enlistados.

- Class: text
  Output: Para poder cambiar el nombre de una de las columnas utilizamos la función rename(), pasandole como segundo parametro del nombre al que se quiere cambiar e igualando al existente, ademas concerva todas las variables que no se mencionan explicitamente.

- Class: text
  Output: Si se quiere agregar columanas a las ya existentes, podemos utilizar la funcion mutate(), esta nos permitira agregar nuevas columnas (variables) al conjunto ya existente. antes de usar la función, tenemos que seleccionar los datos en los que vamos a trabajar  y guardarlos en una variable para que este pase a ser el primer parametro de referencia de la función mutate().

- Class: cmd_question
  Output: Escribe la siguiente funcion mutate(diamonds,Nueva_variable = price * carat)
  CorrectAnswer: mutate(diamonds,Nueva_variable = price * carat)
  AnswerTests: expr_uses_func('mutate')
  Hint: Ejecuta; mutate(diamonds,Nueva_variable = price * carat)

- Class: text
  Output: La ultima función es summarize(), ésta función colapsa un marco de datos a una sola fila, por lo regular esta función la complementan con group_by(). Esto hace que cambie completamente el análisis del conjunto de datos completo para indicar grupos individuales.

- Class: text
  Output: Cuando se usan los verbos dplyr en un marco de datos agrupados, se aplicaran automaticamente por grupo.

- Class: text
  Output: Existe un sin fin de funciones que ayudan a la transformacion y manipulacion de datos. En los siguientes capitulos seguiremos descubriendo nuevas funciones.

- Class: text
  Output: Existe una hoja de Referencia, es bueno que la tengas a la mano y practiques con algun conjunto de datos.

- Class: text
  Output: Entra a la siguiente liga en tu buscador.

- Class: text
  Output: https://www.rstudio.com/wp-content/uploads/2015/03/data-wrangling-spanish.pdf

- Class: text
  Output: Ahora practica un poco antes de avanzar con las siguientes lecciones.
  
  
