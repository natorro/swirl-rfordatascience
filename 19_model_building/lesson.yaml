- Class: meta
  Course: swirl-rfordatascience
  Lesson: 19_model_building
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3


- Class: text
  Output: El este capítulo nos centraremos en realizar progresivamente modelados de datos reales, para una mejor comprensión.

- Class: text
  Output: Por ejemplo, en los capítulos anteriores trabajamos con el dataset diamonds, en donde pudimos apreciar como los diamantes de baja calidad son más caros.

- Class: cmd_question
  Output: Para poder ver la evolución del modelo del análisis de los datos con la función ggplot() grafica solo la columna carat y price y aplicale la función geom_hex(bins = 50)
  CorrectAnswer: ggplot(diamonds, aes(carat, price)) + geom_hex(bins = 50)
  AnswerTests: omnitest(correctExpr='ggplot(diamonds, aes(carat, price)) + geom_hex(bins = 50)')
  Hint:  La función es ggplot(diamonds, aes(carat, price)) + geom_hex(bins = 50)

- Class: text
  Output: Para ver el efecto que causan los diferentes atributos de los diamantes en su precio, tendrémos que trabajar un poco los datos para llevar a cabo bien el modelo y poder ver con exactitud dichos efectos.

- Class: text
  Output: Primero tendremos que descartar aquellos valores que se encuentran fuera del rango de 0 a 2.5 ya que la mayor cantidad de datos se encuentra en este rango trabajaremos con ellos

- Class: cmd_question
  Output: Primero realizaremos un filtrado de los datos en carat para que solo aparezcan los datos entre el rango de 0-2.5, por lo tanto escribe  modelo.d <- diamonds %>% filter(carat <= 2.5)
  CorrectAnswer: modelo.d <- diamonds %>% filter(carat <= 2.5)
  AnswerTests: omnitest(correctExpr='modelo.d <- diamonds %>% filter(carat <= 2.5)')
  Hint: Revisa la sintaxis.

- Class: cmd_question
  Output: Ahora modificaremos el dataset agregandole una transformación logaritmica para que los datos se apeguen  a un modelo lineal, por lo tanto modelo.d <- modelo.d %>% mutate(price.rescale = log2(price), carat.rescale = log2(carat))
  CorrectAnswer: modelo.d <- modelo.d %>% mutate(price.rescale = log2(price), carat.rescale = log2(carat))
  AnswerTests: omnitest(correctExpr='modelo.d <- modelo.d %>% mutate(price.rescale = log2(price), carat.rescale = log2(carat))')
  Hint: Revisa la sintaxis.

- Class: text
  Output: Ahora se nos fácilita ver la relación que existe entre los quilates y el precio.

- Class: cmd_question
  Output: Por lo tanto grafica las variables carat.rescale y price.rescale de la variable modelo.d y aplica la función geom_hex(bins = 50)
  CorrectAnswer: ggplot(modelo.d, aes(carat.rescale, price.rescale)) + geom_hex(bins = 50)
  AnswerTests: omnitest(correctExpr='ggplot(modelo.d, aes(carat.rescale, price.rescale)) + geom_hex(bins = 50)')
  Hint: Escribe la función para obtener el plot que se te pidió.

- Class: text
  Output: Ahora veremos una manera más optima para visualizar los datos y entender más facilmente.

- Class: text
  Output: Esto lo haremos al hacer una modificación al conjunto de datos, el cual graficaremos su comportamiento a travez de una función cuadratica y la compararemos con los datos de modelo.d

- Class: cmd_question
  Output: La función lm() nos da la depedencia de una variable dependiente que explica a la otra, por lo tanto para  usar esta función, le pasaremos las dos columnas nuevas,y el dataset, model.fac <- lm(price.rescale ~ carat.rescale, data = modelo.d) 
  CorrectAnswer: model.fac <- lm(price.rescale ~ carat.rescale, data = modelo.d)
  AnswerTests: omnitest(correctExpr='model.fac <- lm(price.rescale ~ carat.rescale, data = modelo.d)')
  Hint: Revisa la sintaxis

- Class: cmd_question
  Output: Para saber el modelo que estamos utilizando, escribe lm(modelo.d$price.rescale ~ modelo.d$carat.rescale)
  CorrectAnswer: lm(modelo.d$price.rescale ~ modelo.d$carat.rescale)
  AnswerTests: omnitest(correctExpr='lm(modelo.d$price.rescale ~ modelo.d$carat.rescale)')
  Hint: Revisa la sintaxis.

- Class: cmd_question
  Output: Lo que haremos a continuación es generar otra variable en la cual crearemos una función que describa el comportamiento de los datos, por lo tanto primero es escribir la siguente función func <- modelo.d %>% data_grid(carat = seq_range(carat, 20))
  CorrectAnswer: func <- modelo.d %>% data_grid(carat = seq_range(carat, 20))
  AnswerTests: omnitest(correctExpr='func <- modelo.d %>% data_grid(carat = seq_range(carat, 20))')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Lo que haremos a continuación es generar dos columnas más func <- func %>% mutate(carat.rescale = log2(carat)) 
  CorrectAnswer: func <- func %>% mutate(carat.rescale = log2(carat))
  AnswerTests: omnitest(correctExpr='func <- func %>% mutate(carat.rescale = log2(carat))')
  Hint: Revisa la sintaxis 

- Class: cmd_question
  Output: Ahora modificaremos la nueva variable para agregar las predicciones del modelo de regresión, en este caso solo los datos de price.rescale, func %>% add_predictions(model.fac, "price.rescale")
  CorrectAnswer: func %>% add_predictions(model.fac, "price.rescale")
  AnswerTests: omnitest(correctExpr='func %>% add_predictions(model.fac, "price.rescale")')
  Hint: Revisa la sintaxis 

- Class: text
  Output: Lo que hace la función anteriror, es agregar una columna de .pred para las entradas del dataframe, en este caso carat, para que se grafique con forme a las predicciones y las varables de entrada.

- Class: cmd_question
  Output: Por ultimo modificaremos los valores originales de price, func %>% mutate(price = 2 ^ price.rescale)
  CorrectAnswer: func %>% mutate(price = 2 ^ price.rescale)
  AnswerTests: omnitest(correctExpr='func %>% mutate(price = 2 ^ price.rescale)')
  Hint: Revisa la sintaxis.

- Class: text
  Output:  Ya tenemos nuestro modelo de comportamiento de los datos, para que nuestro resultado al momento de hacer un analisis sea correcto, Ahora pasaremos a graficar las dos variables func y modelo.d

- Class: cmd_question
  Output: Escribe ggplot(modelo.d, aes(carat, price)) + geom_hex(bins = 50) + geom_line(data = func, color = "green", size = 1)
  CorrectAnswer: ggplot(modelo.d, aes(carat, price)) + geom_hex(bins = 50) + geom_line(data = func, color = "green", size = 1)
  AnswerTests: omnitest(correctExpr='ggplot(modelo.d, aes(carat, price)) + geom_hex(bins = 50) + geom_line(data = func, color = "green", size = 1)')
  Hint: Revisa la sintaxis 



- Class: text
  Output: Ahora veremos otro ejemplo, en el cual trataremos con las dimenciones de los diamantes para saber si tambien influye en el precio del diamante

- Class: cmd_question
  Output: Lo primero que tenemos que hacer es cargar el dataset diamonds en la variable midiamonsd 
  CorrectAnswer: midiamonds <- diamonds
  AnswerTests: omnitest(correctExpr='midiamonds <- diamonds')
  Hint: Escribe lo que se te pidió



- Class: cmd_question
  Output:  Ahora nuestra variable dependiente sera el precio, como en el ejercicio anteriror y la variable independiente será x,y e z. Primero grafíca la variable x 
  CorrectAnswer: plot(midiamonds$x, midiamonds$pirce)
  AnswerTests: omnitest(correctExpr='plot(midiamonds$x, midiamonds$price)')
  Hint: Escribe lo que se te pidió, ya se vió anteriormente.

- Class: text
  Output: Como podrás obserbar, hay una fuerte relación entre el precio y las dimenciones del diamante, por lo tanto grafica por separado las otras dos dimenciones.

- Class: cmd_question
  Output: Grafíca y
  CorrectAnswer: plot(midiamonds$y, midiamonds$price)
  AnswerTests: omnitest(correctExpr='plot(midiamonds$y, midiamonds$price)')
  Hint: es igual que la declaración de la gráfica de x, solo pon y.

- Class: text
  Output: En la siguiente gráfica si puedes obserbar se encuentran dos valores extremos que afectan a los emás datos, por lo tanto, modificaremos la gráfica eliminando esos valores extremos y así, no meter ruidos en los demás datos.

- Class: cmd_question
  Output: Por lo tanto primero lacalizaremos al valor maximo dentro del conjunto de valores de y, guarda el resultado en maximo.
  CorrectAnswer: maximo<-max(midiamonds$y)
  AnswerTests: omnitest(correctExpr='maximo<-max(midiamonds$y)')
  Hint: recuerda que debes utilizar la función max().

- Class: cmd_question
  Output: Ahora con la función which(), procederemos a quitar el indice en el que se encuentra el valor maximo, y volvemos a guardar el nuevo dataset en midiamonsd.
  CorrectAnswer: midiamonds <- midiamonds[-(which(midiamonds$y == maximo)), ]
  AnswerTests: omnitest(correctExpr='midiamonds <- midiamonds[-(which(midiamonds$y == maximo)), ]')
  Hint: Recuerda acceder a los valores de un dataset, midiamonds[] y la función which se emplea which(midiamonds$y == maximo)

- Class: text
  Output: Como podrás observar el numero de observaciones del dataset se redujo en 1, por lo tanto graficaremos de nuevo.

- Class: cmd_question
  Output: Grafíca la variable y 
  CorrectAnswer: plot(midiamonds$y, midiamonds$price)
  AnswerTests: omnitest(correctExpr='plot(midiamonds$y, midiamonds$price)')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Como aún hay un valor extremo que altera al resto delos datos, procederemos a eliminarlo de la misma manera que el dato anterior. encuentra el valor maximo y guardalo en maximo.
  CorrectAnswer: maximo <- max(midiamonds$y)
  AnswerTests: omnitest(correctExpr='maximo <- max(midiamonds$y)')
  Hint: Escribe lo que se te pdio.

- Class: cmd_question
  Output: Ahora procede a eliminar el indice del valor maximo con la funció which().
  CorrectAnswer: midiamonds <- midiamonds[-(which(midiamonds$y == maximo)), ]
  AnswerTests: omnitest(correctExpr='midiamonds <- midiamonds[-(which(midiamonds$y == maximo)), ]')
  Hint: Escribe lo que se te pdio.

- Class: cmd_question
  Output: Ahora vuelve a graficar.
  CorrectAnswer: plot(midiamonds$y, midiamonds$price)
  AnswerTests: omnitest(correctExpr='plot(midiamonds$y, midiamonds$price)')
  Hint: Escribe lo que se te pdio.

- Class: text
  Output: Ahora el conjunto de datos de la variable y se encuentra en condiciones para trabajar con el, lo único que nos falta es tratar con la variable z.

- Class: cmd_question
  Output: Grafíca la variable z
  CorrectAnswer: plot(midiamonds$z, midiamonds$price)
  AnswerTests: omnitest(correctExpr='plot(midiamonds$z, midiamonds$price)')
  Hint: Escribe lo que se te pidió

- Class: text
  Output: En la gráfica podemos obserbar que también hay un valor extremo que nos hace variar el resultado. Procederemos a eliminar ese valor como lo hicimos anteriormente cuando trabajamos con y.

- Class: cmd_question
  Output: Encuentra el valor máximo de z y guardalo en maximo.
  CorrectAnswer: maximo<-max(midiamonds$z)
  AnswerTests: omnitest(correctExpr='maximo<-max(midiamonds$z)')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Elimina el indice del valor máximo en z y guarda el cambio en midiamonds.
  CorrectAnswer: midiamonds <- midiamonds[-(which(midiamonds$z == maximo)),]
  AnswerTests: omnitest(correctExpr='midiamonds <- midiamonds[-(which(midiamonds$z == maximo)),]')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Ahora que ya estan las tres variables, listas para trabajar podemos tratar de responder a la pregunta si las tres variables tienen alguna relación para definir el precio.

- Class: cmd_question
  Output: Grafíca el volumen con las variables x, y, z que son las variables independientes y el precio que es la variable dependiente.
  CorrectAnswer: plot( midiamonds$x * midiamonds$y * midiamonds$z, midiamonds$price)
  AnswerTests: omnitest(correctExpr='plot( midiamonds$x * midiamonds$y * midiamonds$z, midiamonds$price)')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Ahora podemos ver claramente en la gráfica que hay tres bandas bien definidas en las cuales, se puede apreciar claramente que aunque tengan el mismo volumen los diamantes hay otros factores con los cuales tambien afectan al precio de los mismos.

- Class: text
  Output: Pero lo que nos importa en este momento es sacar el modelo de regresión lineal.

- Class: cmd_question
  Output: Haremos una regresión lineal con la variable price y la variable y por lo tanto, los cambios que vamos a realizar los vamos a guardar en el mismo dataset midiamonds. Entonces para hacer la regresión lineal al dataset midiamonds, le agregaremos la función mutate() (a midiamonds), para asi agregar dos columnas nuevas que se llamarán reg.price y reg.y, a cada una de las vriables le asignaremos una función log2(), y cada función resivirá como parametro price e y con su respectiva variable nueva.
  CorrectAnswer: midiamonds <- midiamonds %>% mutate(reg.price = log2(price), reg.y = log2(y))
  AnswerTests: omnitest(correctExpr='midiamonds <- midiamonds %>% mutate(reg.price = log2(price), reg.y = log2(y))')
  Hint: La sintaxis para agregar las dos columnas nuevas es midiamonds <- midiamonds %>% mutate(reg.price = log2(price), reg.y = log2(y))

- Class: cmd_question
  Output: Por ultimo grafica reg.price y reg.y con la función de ggplot agregando la función geom_hex(bins = 50)
  CorrectAnswer: ggplot(midiamonds, aes(reg.y, reg.price)) + geom_hex(bins = 50)
  AnswerTests: omnitest(correctExpr='ggplot(midiamonds, aes(reg.y, reg.price)) + geom_hex(bins = 50)')
  Hint: La sintaxis de la función es ggplot(midiamonds, aes(reg.y, reg.price)) + geom_hex(bins = 50)


- Class: text
  Output: Ahora pasaremos a ver un modelo que en particular trabajaremos con las cualidades de los diamantes y así poder ver más a fondo el comportamiento del preció de los diamantes.


- Class: cmd_question
  Output: Procederemos a agregar los valores cualitativos de los diamantes y tartar de explicar el precio de los diamantes, por lo tanto escribe midiamonds.res <- lm(price.rescale ~ carat.rescale + color + cut + clarity, data = modelo.d)
  CorrectAnswer: midiamonds.res <- lm(price.rescale ~ carat.rescale + color + cut + clarity, data = modelo.d)
  AnswerTests: omnitest(correctExpr='midiamonds.res <- lm(price.rescale ~ carat.rescale + color + cut + clarity, data = modelo.d)')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Ahora agregaremos predicciones dentro de una nueva variable que solo contendra las variables cualitativas, carat, price y predicciones para esto escribe pred <- modelo.d %>% data_grid(cut, .model = midiamonds.res) %>% add_predictions(midiamonds.res) 
  CorrectAnswer: pred <- modelo.d %>% data_grid(cut, .model = midiamonds.res) %>% add_predictions(midiamonds.res)
  AnswerTests: omnitest(correctExpr='pred <- modelo.d %>% data_grid(cut, .model = midiamonds.res) %>% add_predictions(midiamonds.res)')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Ahora construiremos la gráfica  con ggplot(), pasando como primer parametro pred y como segundo parametro la función aes(), con los dos parametros cut y pred (la variable que es parte del dataset, no el data set), concatenandolo coon la función de geom_point()
  CorrectAnswer: ggplot(pred, aes(cut, pred)) + geom_point()
  AnswerTests: omnitest(correctExpr='ggplot(pred, aes(cut, pred)) + geom_point()')
  Hint: La sintaxis de la función es ggplot(pred, aes(cut, pred)) + geom_point()

- Class: text
  Output: Si el modelo necesita variables que explicitamente no tiene, la función data_grit() automaticamente les proporciona el valor típico. Para las variables continuas usará la media, y para variable categoricas, usará el valor más común.

- Class: text
  Output: Ahora agregaremos la columna de residuos y te estarás preguntando para que ver los residuos, bueno, los residuos son elementos esenciales y un medio para identificar probemas potenciales de cualquier modelo estadístico. 

- Class: cmd_question
  Output: Para ello escribe modelo.d <- modelo.d %>% add_residuals(midiamonds.res, "lresid")
  CorrectAnswer: modelo.d <- modelo.d %>% add_residuals(midiamonds.res, "lresid")
  AnswerTests: omnitest(correctExpr='modelo.d <- modelo.d %>% add_residuals(midiamonds.res, "lresid")')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Ahora graficamos, ggplot(modelo.d, aes(carat.rescale, lresid)) + geom_hex(bins = 50)
  CorrectAnswer: ggplot(modelo.d, aes(carat.rescale, lresid)) + geom_hex(bins = 50)
  AnswerTests: omnitest(correctExpr='ggplot(modelo.d, aes(carat.rescale, lresid)) + geom_hex(bins = 50)')
  Hint: Escribe lo que se te pidió

- Class: text
  Output: Como puedes obserbar en la gráfica, algunos diamantes tienen residuales vastante garndes, como por ejemplo los residuales de 2, nos indican que el diamante es 4 veces el precio que esperabamos, y estos son valores inusuales, por lo tanto si deceas tratar o visualizar los valores inusuales debe ser por separado.

- Class: cmd_question
  Output: Por lo tanto, primero tendremos que aplicar un filtrado a modelo.d para serapar todos aquellos valores que sean mayores a uno, despues agregaremos predicciones de midiamonds.res, también agregaremos la función mutate  donde modificaremos la variable  pred = round(2^ pred), aremos una selección de las columnas price, pred, carat:table y x:z y por ultimo con la función arrange(price)
  CorrectAnswer: modelo.d %>% filter(abs(lresid) > 1) %>% add_predictions(midiamonds.res) %>% mutate(pred = round (2 ^ pred)) %>% select(price, pred, carat:table, x:z) %>% arrange(price)
  AnswerTests: omnitest(correctExpr='modelo.d %>% filter(abs(lresid) > 1) %>% add_predictions(midiamonds.res) %>% mutate(pred = round (2 ^ pred)) %>% select(price, pred, carat:table, x:z) %>% arrange(price)')
  Hint: La sintaxis de la función es modelo.d %>% filter(abs(lresid) > 1) %>% add_predictions(midiamonds.res) %>% mutate(pred = round (2 ^ pred)) %>% select(price, pred, carat:table, x:z) %>% arrange(price)

- Class: text
  Output: Los datos que ahora muestra modelo.d son los supuestos valores inusuales, donde nosotros tenemos que aplicar un criterio para saber si son congruentes con nuestro modelo o no, y si no lo son quiere decir que nuestro modelo no es el adecuado para tratar los datos. 

- Class: text
  Output: Ahora pasaremos a analisar los vuelos en NYC por día, a quí podremos visualizar otro tipo de efectos dentro de este dataset.

- Class: cmd_question
  Output: Comencemos por asignar el dataset de fligths a la variable vuelo.xd
  CorrectAnswer: vuelo.xd <- fligths
  AnswerTests: omnitest(correctExpr='vuelo.xd <- fligths')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Ahora del data set vuelo.xd solo queremos las fechas y el numero de vuelos por día por lo tanto vuelo.xd <- vuelo.xd %>% mutate(date = make_date(year, month, day))%>% group_by(date) %>% summarize(n = n())
  CorrectAnswer:  vuelo.xd <- vuelo.xd %>% mutate(date = make_date(year, month, day))%>% group_by(date) %>% summarize(n = n())
  AnswerTests: omnitest(correctExpr=' vuelo.xd <- vuelo.xd %>% mutate(date = make_date(year, month, day))%>% group_by(date) %>% summarize(n = n())')
  Hint: Escribe lo que se te pide.

- Class: text
  Output: Como podrás ver en la parte superior donde estan los datos, ya solo nuestro dataset contiene solo doos columnas una de las fechas y otra de el número de vuelos.

- Class: cmd_question
  Output: Ahora para saber como se esta comportando estos datos, gráficaremos con ggplot y concatenamos con geom_line()
  CorrectAnswer: ggplot(vuelo.xd, aes(date, n)) + geom_line()
  AnswerTests: omnitest(correctExpr='ggplot(vuelo.xd, aes(date, n)) + geom_line()')
  Hint: Solo tienes que graficar las dos variables que se encuentran en el dataset.

- Class: text
  Output: Tratar de comprender la gráfica, y encontrar lo que está haciendo que la gráfica se comport de esta manera es un tanto complicado, por eso empesaremos visualizando la distribución de los números de vuelo por día.

- Class: cmd_question
  Output: Para esto escribe vuelo.xd <- vuelo.xd %>% mutate(sday = wday(date,  label = TRUE))
  CorrectAnswer: vuelo.xd <- vuelo.xd %>% mutate(sday = wday(date,  label = TRUE))
  AnswerTests: omnitest(correctExpr='vuelo.xd <- vuelo.xd %>% mutate(sday = wday(date,  label = TRUE))')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Ahora gráfica  la columna sday y n y concatena la función de ggplot con geom_boxplot()
  CorrectAnswer: ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot()
  AnswerTests: omnitest(correctExpr='ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot()')
  Hint: Escribe lo que se te pide.

- Class: text
  Output: En la gráfica anterior podemos darnos cuenta que la mayoria de los vuelos se da entre semana y en fines de semana, el número de vuelos se reduce considerablemente a comparación de los demás días.

- Class: cmd_question
  Output: Sacaramos un modelo en donde el número de vuelos es nuestra bariable que explicará  los puelos por día de la semana por lo tanto escribe mod.v <- lm(n ~ sday, data = vuelo.xd)
  CorrectAnswer: mod.v <- lm(n ~ sday, data = vuelo.xd)
  AnswerTests: omnitest(correctExpr='mod.v <- lm(n ~ sday, data = vuelo.xd)')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Ahora le aplicaremos las predicciones pred <- vuelo.xd %>% data_grid(sday) %>% add_predictions(mod.v, "n")
  CorrectAnswer: pred <- vuelo.xd %>% data_grid(sday) %>% add_predictions(mod.v, "n")
  AnswerTests: omnitest(correctExpr='pred <- vuelo.xd %>% data_grid(sday) %>% add_predictions(mod.v, "n")')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Graficamos sday y n concatenando con geom_boxplot y geom_point(data = pred, color = "green", size = 3) 
  CorrectAnswer: ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot() + geom_point(data = pred, color = "green", size = 3)
  AnswerTests: omnitest(correctExpr='ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot() + geom_point(data = pred, color = "green", size = 3)')
  Hint: La sintaxis de la función es ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot() + geom_point(data = pred, color = "green", size = 3)

- Class: text
  Output: Ahora como en el ejercicio de los diamantes, agregaremos los residuales y los graficaremos.

- Class: cmd_question
  Output: Aplica al dataset vuelo.xd la función add_residuals(mod.v)
  CorrectAnswer: vuelo.xd <- vuelo.xd %>% add_residuals(mod.v)
  AnswerTests: omnitest(correctExpr='vuelo.xd <- vuelo.xd %>% add_residuals(mod.v)')
  Hint: La sintaxis es vuelo.xd <- vuelo.xd %>% add_residuals(mod.v)

- Class: cmd_question
  Output: Por ultimo graficamos date y resid concatenandolo con geom_ref_line(h = 0) y geom_line()
  CorrectAnswer: ggplot(vuelo.xd, aes(date, resid)) + geom_ref_line(h = 0) + geom_line()
  AnswerTests: omnitest(correctExpr='ggplot(vuelo.xd, aes(date, resid)) + geom_ref_line(h = 0) + geom_line()')
  Hint: Escribe lo que se te pide, vamos no es difícil.

- Class: text
  Output: Ahora la gráfica en el eje y estamos viendo la desviación de el número esperado de vuelos, dado el día de la semana.

- Class: text
  Output: Pero un nuestro moldelo falla a partir del ms de junio, ya que aún se puede apreciar que sigue un parametro regular fuerte que nuestro modelo no puede capturar. Por lo tanto graficaremos por dia de la semana.

- Class: cmd_question
  Output: Escribe ggplot(vuelo.xd, aes(date, resid, color = sday)) + geom_ref_line(h = 0) + geom_line()
  CorrectAnswer: ggplot(vuelo.xd, aes(date, resid, color = sday)) + geom_ref_line(h = 0) + geom_line()
  AnswerTests: omnitest(correctExpr='ggplot(vuelo.xd, aes(date, resid, color = sday)) + geom_ref_line(h = 0) + geom_line()')
  Hint: escribe lo que se te pidió.

- Class: cmd_question
  Output: Ahora hay que ver cuantos vuelos estan por debajo de lo esperado. a vuelo.xd aplicale un filtrado con valores de resid que esten por debajo de -100
  CorrectAnswer: vuelo.xd %>% filter(resid < -100)
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% filter(resid < -100)')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Se ve claramente que aún hay una cantidad considerable de vuelos por debajo de lo esperado por día. Nos referimos a que hay muy pocos vuelos por día, esto también se debe a otros factores que no estamos tomando en cuenta dentro de nuestro modelo, por ejemplo los días festivos en EU.

- Class: text
  Output: Lo único que nos queda por hacer es sacar una tendencía a lo largo del año.

- Class: cmd_question
  Output: Para lograr esta tendencía escribe vuelo.xd %>% ggplot(aes(date, resid)) + geom_ref_line(h = 0) + geom_line(color = "grey50") + geom_smooth(se = FALSE, span = 0.20)
  CorrectAnswer: vuelo.xd %>% ggplot(aes(date, resid)) + geom_ref_line(h = 0) + geom_line(color = "grey50") + geom_smooth(se = FALSE, span = 0.20)
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% ggplot(aes(date, resid)) + geom_ref_line(h = 0) + geom_line(color = "grey50") + geom_smooth(se = FALSE, span = 0.20)')
  Hint: Escribe lo que s te pide.

- Class: text
  Output: Lo único que podemos sacar de este modelo, es que no nos sirve da nada, más que para afirmar que en epoca de invierno hay menos vuelos que en verano. Pero esto es ganancia porque ya pudimos identificar que hay modelos que no nos sirven por la poca información que contienen los dataset y por lo tanto tenemos que cambiar la manera en que podemos analizar este tipo de dataset. 

- Class: text
  Output: Por el momento podemos analizar los vuelos en sábado, dichos valores son los que afectan mayormente a nuestro modelo anterior.

- Class: cmd_question
  Output: Primero a nuestro dataset tenemos que hacer un filtro, donde del listado sday revisaremos solamente los vuelos que en la primera columna empiecen con "sáb", despues aplicaremos la graficación del comportamiento de los vuelos dentro de este día especificamente y concatenamos las siguientes funciones geom_point() + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
  CorrectAnswer: vuelo.xd %>% filter(sday == "sáb") %>% ggplot(aes(date, n)) + geom_point() + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% filter(sday == "sáb") %>% ggplot(aes(date, n)) + geom_point() + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")')
  Hint: La sintaxis es vuelo.xd %>% filter(sday == "sáb") %>% ggplot(aes(date, n)) + geom_point() + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")

- Class: text
  Output: Aquí la función scale_x_date(), hacemos que en el eje x tome como escala de tiempo por mes, para tener una mejor visualización de los vuelos en sábado.

- Class: text
  Output: Ahora separaremos la gráfica en tres partes para identificar la epoca de verano invierno y el resto del año.

- Class: cmd_question
  Output: Para lograr las tres separaciones crearemos una variable en donde separemos los datos de los vuelos. primero crearemos una función en donde tendremos los datos separados categoricamente. Escribe cat <- function(day){ cut(day, breacks = ymd(20130101, 20130605, 20130825, 20140101), labels = c("primavera", "verano", "invierno"))}
  CorrectAnswer: cat <- function(day){ cut(day, breacks = ymd(20130101, 20130605, 20130825, 20140101), labels = c("primavera", "verano", "invierno"))}
  AnswerTests: omnitest(correctExpr='cat <- function(day){ cut(day, breacks = ymd(20130101, 20130605, 20130825, 20140101), labels = c("primavera", "verano", "invierno"))}')
  Hint: Revisa la sintáxis.



- Class: cmd_question
  Output: Ahora agregamos una columna de categorias al dataset  vuelo.xd, en donde a la variable cat le asignaremos term(date).
  CorrectAnswer: vuelo.xd <- vuelo.xd %>% mutate(cat = term(date)
  AnswerTests: omnitest(correctExpr='vuelo.xd <- vuelo.xd %>% mutate(cat = term(date)')
  Hint:  La sintáxis es vuelo.xd <- vuelo.xd %>% mutate(cat = term(date).

- Class: cmd_question
  Output: Ahora, tenemos que separar los datos por las tres categorias, y esto lo haremos mediante la función filter, donde le pasaremos aquellos datos que tenga la cadena de caracteres "sáb", de la variable sday. Así mismo aplicaremos la función ggplot para graficar date, n y en color = cat, concatenaremos con geom_point(alpha = 1/3) (recuerda que alpha es el grao de transparencia), geom_line() y sacle(NULL, date_breaks = "1 month", date_labels = "%b")
  CorrectAnswer: vuelo.xd %>% filter(sday == "sáb") %>% ggplot(aes(date, n, color = cat)) + geom_point(alpha = 1/3) + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% filter(sday == "sáb") %>% ggplot(aes(date, n, color = cat)) + geom_point(alpha = 1/3) + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")')
  Hint:  La sintáxis es vuelo.xd %>% filter(sday == "sáb") %>% ggplot(aes(date, n, color = cat)) + geom_point(alpha = 1/3) + geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")

- Class: text
  Output: Ahora al graficar estos datos en una gráfica de cajas, podrémos ver como afectan en los demás días de la semana.

- Class: cmd_question
  Output: Gráfica del dataset vuelo.xd, las variables sday, n, color = cat y concatenalo con la función correspondiente a la gráfica boxplot.
  CorrectAnswer: vuelo.xd %>% ggplot(aes(sday, n, color = cat)) + geom_boxplot()
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% ggplot(aes(sday, n, color = cat)) + geom_boxplot()')
  Hint: La sintaxis de lo que se te pide es vuelo.xd %>% ggplot(aes(sday, n, color = cat)) + geom_boxplot()

- Class: text
  Output: En la gráfica anterior se puede apreciar que hay datos atípicos que son los que nos modifícan el resultado del modelo anterior, por tanto haremos un modelo para estos datos y ver como se comportan.

- Class: cmd_question
  Output: Crearemos dos modelos, uno con categorias y el segundo sin categorias, para esto, creamos primero los dos primeros modelos el primero se llamará model1 <- lm(n  sday, data = vuelo.xd)
  CorrectAnswer: model1 <- lm(n  sday, data = vuelo.xd)
  AnswerTests: omnitest(correctExpr='model1 <- lm(n  sday, data = vuelo.xd)')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Ahora crearemos el segundo modelo model2 <- lm(n ~ sday * cat, data = vuelo.xd)
  CorrectAnswer: model2 <- lm(n ~ sday * cat, data = vuelo.xd)
  AnswerTests: omnitest(correctExpr='model2 <- lm(n ~ sday * cat, data = vuelo.xd)')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Ahora al dataset vuelo.xd le aplicaremos dos funiones la primera sera gather_residuals, esta función tendrá dos variables, la primera será scat = model1 y la segunda será ccat = model2. La segunda función será ggplot, donde graficaremos  date, resid, color = model y concatenaremos con a funcion geom_line(alpha = 0.75) 
  CorrectAnswer: vuelo.xd %>% gather_residuals(scat = model1, ccat = model2) %>% ggplot(aes(date, resid, color = model)) + geom_line(alpha = 0.75)
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% gather_residuals(scat = model1, ccat = model2) %>% ggplot(aes(date, resid, color = model)) + geom_line(alpha = 0.75)')
  Hint: La modificación pedida es vuelo.xd %>% gather_residuals(scat = model1, ccat = model2) %>% ggplot(aes(date, resid, color = model)) + geom_line(alpha = 0.75)

- Class: text
  Output: Como podemos ver, la gráfica que tiene las categorias esta un poco más ajustada que la gráfica que no contiene las categorias de los datos.

- Class: text
  Output: Si nosotros quisieramos ver el comportamiento de los datos separado categoricamente, y ver con exactitud la concentración de los datos mediante predicciones.
  
  

- Class: cmd_question
  Output: Escribiremos una variable cuad, donde le pasaremos el dataset vuelo.xd pero para que al momento de gráficar el geom_boxplot salga por día, entonces le aplicaremos la función data_grid(sday, cat) y al mismo tiempo agregamos la predicciones  add_predictions(model2, "n")
  CorrectAnswer: cuad <- vuelo.xd %>% data_grid(sday, cat) %>% add_predictions(model2, "n")
  AnswerTests: omnitest(correctExpr='cuad <- vuelo.xd %>% data_grid(sday, cat) %>% add_predictions(model2, "n")')
  Hint: La asignación de la variable es cuad <- vuelo.xd %>% data_grid(sday, cat) %>% add_predictions(model2, "n")

- Class: cmd_question
  Output: Ahora pasaremos a graficar vuelo.xd, tomando solo las columnas de sday y n y concatenaremos con geom_boxplot(), geom_point(data = cuad, color = "red") y por ultimo facet_wrap(~ cat)
  CorrectAnswer: ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot() + geom_point(data = cuad, color = "red") + facet_wrap(~ cat)
  AnswerTests: omnitest(correctExpr='ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot() + geom_point(data = cuad, color = "red") + facet_wrap(~ cat)')
  Hint: La asignación de la variable es ggplot(vuelo.xd, aes(sday, n)) + geom_boxplot() + geom_point(data = cuad, color = "red") + facet_wrap(~ cat)

- Class: text
  Output: lo que buscamos con este modelo es reducir el impacto de los valores atípicos grandes que afectan a los demás valores, una manera de reducir los valres atípicos es con la función MASS::rlm(), lo que hace esta función es que devuelve una reducción de impacto de los valores atípicos sobre los estimados.

- Class: cmd_question
  Output: Para aplicar la funció escribe model3 <- MASS::rlm(n ~ sday * cat, data = vuelo.xd)
  CorrectAnswer: model3 <- MASS::rlm(n ~ sday * cat, data = vuelo.xd)
  AnswerTests: omnitest(correctExpr='model3 <- MASS::rlm(n ~ sday * cat, data = vuelo.xd)')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Ahora lo aplicaremos al dataset vuelo.xd %>% add_residuals(model3, "resid") %>% ggplot(aes(date, resid)) + geom_line(yintercept = 0, size = 2, color = "white") + geom_line()
  CorrectAnswer: vuelo.xd %>% add_residuals(model3, "resid") %>% ggplot(aes(date, resid)) + geom_line(yintercept = 0, size = 2, color = "white") + geom_line()
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% add_residuals(model3, "resid") %>% ggplot(aes(date, resid)) + geom_line(yintercept = 0, size = 2, color = "white") + geom_line()')
  Hint: Escribe lo que se te pide.

- Class: text
  Output: Ahora se puede apreciar mucho mejor los valores atípicos positivos y negativos.

- Class: text
  Output: Para terminar la leccion te enseñaremos como con el tiempo tambien se puede crear un modelo, utilizaremos el dataset anterior vuelo.xd y aplicaremos predicciones y usaremos MASS::rlm()

- Class: cmd_question
  Output: Primero crearemos el modelo para esto escribe model4 <- MASS::rlm(n ~ sday * ns(date, 5), data = vuelo.xd)
  CorrectAnswer: model4 <- MASS::rlm(n ~ sday * ns(date, 5), data = vuelo.xd)
  AnswerTests: omnitest(correctExpr='model4 <- MASS::rlm(n ~ sday * ns(date, 5), data = vuelo.xd)')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Ahora a vuelo.xd le aplicaremos la función data_grid(sday, data = seq_range(date, n = 13)), add_predictions(model4), ggplot(aes(date, pred, color = sday)) y concatenaremos con geom_line() y geom_point().
  CorrectAnswer: vuelo.xd %>% data_grid(sday, date = seq_range(date, n = 13)) %>% add_predictions(model4) %>% ggplot(aes(date, pred, color = sday)) + geom_line() + geom_point()
  AnswerTests: omnitest(correctExpr='vuelo.xd %>% data_grid(sday, date = seq_range(date, n = 13)) %>% add_predictions(model4) %>% ggplot(aes(date, pred, color = sday)) + geom_line() + geom_point()')
  Hint: La respuesta es vuelo.xd %>% data_grid(sday, date = seq_range(date, n = 13)) %>% add_predictions(model4) %>% ggplot(aes(date, pred, color = sday)) + geom_line() + geom_point()

- Class: text
  Output: Como puedes observar el la grafica de los vuelos de los sábados, hay datos extremos que son o muy chicos o muy grandes, dado a estos valores se afectan los demás al momento de querer hacer un modelo con todos los datos.
