- Class: meta
  Course: Ciencia de datos con R
  Lesson: Visualizacion de datos con ggplot2
  Author: Ruiz Rodriguez Ricardo
  Type: Standard
  Organization: Instituto de Física
  Version: 2.4.3


- Class: text
  Output: En esta lección nos concentraremos en la visualización de datos usando ggplot2

- Class: text
  Output: ggplot2 es un sistema que implementa una gramática gráfica.

- Class: text
  Output: Trabajaremos con un conjunto de datos llamado mpg que vive en la paqueteria tidyverse.

- Class: cmd_question
  Output: Ejecuta; library(tidyverse)
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr='library(tidyverse)')
  Hint: Ejecuta; library(tidyverse)

- Class: text
  Output: Data frame --> Colección rectangular de variables en las columnas, y observaciones en los campos.

- Class: cmd_question
  Output: Para lograr ver el conjunto de datos, escribe el data frame mpg
  CorrectAnswer: mpg
  AnswerTests: omnitest(correctExpr='mpg')
  Hint: 

- Class: text
  Output: Si en algun momento se te presenta alguna duda de como funciona algun comando, recuerda primero poner ? seguido del comando que quieres investigar.

- Class: text
  Output: Ahora pasemos a la estructura para la manipulación de los datos, si se quiere visualizar la información en un gráfico se puede usar la siguiente estructura básica de codigo":"

- Class: text
  Output: ggplot(data = <DATOS>) + <GEOM_FUNCION>(mapping = aes(<MAPPEADOS>))

- Class: text
  Output: Ahora analizaremos las componentes de la función ggplot.

- Class: text
  Output: ggplot --> función que inicializa el conjunto de datos a usar

- Class: text
  Output: mpg --> conjunto de datos a usar, en este caso un data frame

- Class: text
  Output: geom_point --> función que genera una sección de un producto cartesiano por puntos

- Class: text
  Output: aes --> contracción del termino aesthetics, los cuales son indicaciónes de gráficos insertados en el producto cartesiano, donde se definen variables y como se desea iterpretar visualmente, por ejemplo <x = displ, y = hwy>, donde se indica que dentro de los vectores x y y se insertaran los valores de las variables displ y hwy correspondientes a mpg

- Class: cmd_question
  Output: Escribe la función ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))

- Class: text
  Output: Ahora bien al diagrama de dispersión binomial generado por el comando anterior, puede agregarle una tercera variable, como clase, asignándolo a una estética.

- Class: text
  Output: Estética --> propiedad visual de los objetos en la gráfica

- Class: text
  Output: La estetica incluye cosas como el tamaño, la forma o el color de tus datos en la gráfica, para hacer referencia a la estética propiamente dicha utilizaremos la referencia nivel.

- Class: text
  Output: La función junta cada uno de los mapeos estéticos usados por capas y los pasa al argumento de mapeo de capas. Incluso las variables x y y son esteticas al ser localizaciones que se pueden mapear como propiedades visuales sobre los datos.
  
- Class: text
  Output: Lo que podemos hacer para la visualización de los datos es ponerle color a la clase, esto lo logramos con el parametro color=class, este parametro  va dentro de la de la función aes después de la asignación de los vectores x,y.

- Class: cmd_question
  Output: Agregaremos argumentos a aes(). Agregaa color = class
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))

- Class: text
  Output: En este ejemplo se le esta asignando un solo nivel a la estética, para cada valor único de la variable, este proceso se le conoce como "scaling". Esta función también te agregará una leyenda que explica que niveles coresponden a cada valor del conjunto.

- Class: text
  Output: Un parametro muy util de la función aes es el size, el cual nos permite realizar un mapeo de nuetro conjunto de datos, el cual nos ayuda a saber el tipo de lase que tienen los datos.

- Class: cmd_question
  Output: Cambia color = class por size = class
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))')
  Hint:  Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))

- Class: text
  Output: NOTA --> Este comando es sólo para mapear un desorden variable, si se mapea una estética en orden, nos lanzará una advertencia

- Class: text
  Output: Para mapear la estética ordenada del conjunto de datos, podemos hacerlo con los parametros alpha y shape, el parametro alpha controla la transparencia de los puntos, esto nos ayuda para resaltar la clase que deseamos, el parametro shape cambia la forma de representar gráficamente los datos.


- Class: cmd_question
  Output: Cambia size = class por alpha = class
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))

- Class: cmd_question
  Output: Cambia size = class por shape = class
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))

- Class: text
  Output: Puedes ver que la estetica se cambia en el parametro mapping = aes()

- Class: text
  Output: Las estéticas tambien se pueden aplicar a todo el conjunto, sin que contengan información sobre la variable, y solo cambien la apariencia del gráfico, definindolas fuera de la funcion aes()

- Class: text
  Output: Los cambios a todo el conjunto de datos son --> Color, tamaño de los puntos en mm, la figura de un punto.

- Class: text
  Output: Para analizar detalladamente las variables categoricas, es util dividir su gráfica en facetas, es decir, dividir la gráfica en subgráficas que muestran un subconjunto de datos.

- Class: text
  Output: Para facetear su gráfica con una sola variable utilizamos la función facet_wrap.

- Class: text
  Output: El argumento dentro de facet_wrap deberia ser una formula que crees  con "~" seguido de un nombre de variable.

- Class: text
  Output: Aquí "formula" es el nombre de la estructura de datos en R.

- Class: cmd_question
  Output: Ejecuta; ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) y observa las divisiones que crear facet_wrap()
  CorrectAnswer: ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
  AnswerTests: omnitest(correctExpr='ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)')
  Hint: Ejecuta; ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)

- Class: text
  Output: Si no quiere facetear en filas y columnas, use a **"."** En lugar de un nombre de variable, por ejemplo --> facet_grid(.~cyl)

- Class: text
  Output: Ahora veremos la implementación de diferentes geoms para la representación de datos.

- Class: text
  Output: geom --> Es un objeto geométrico que una gráfica utiliza para representar datos.

- Class: text
  Output: Las personas clasifican a las gráficas por el tipo de geom que utiliza, por ejemplo, las gráficas de barras(o histogramas), usan un geom de barra, las gráficas de linea, utilizan un geom de linea, etc. 

- Class: text
  Output: la función geom in ggplot2 toma un argumento de mapeo. Sin envargo, no siempre se trabaja la estetica con geom. Puedes transformar la forma de un punto, pero no puedes transformar la forma de una linea, lo que puedes hacer en este caso es establecer el tipo de una linea. La funcion geom_smooth() se encarga de dibujar una linea diferente, para cada valor único de la variable que asigne al tipo de linea.

- Class: cmd_question
  Output: Ejemplo de esto es la siguiente grafica en la que comprobaremos lo anterior, escribe --> ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
  CorrectAnswer: ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))

- Class: text
  Output: Puedes visualizar multiples geoms en una gráfica, agregando multiples funciones a ggplot().

- Class: cmd_question
  Output: A la función anterior agrega la función geom_point pasando como valores displ y hwy, al parametro aes dentro de la misma función. 
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy))

- Class: text
  Output: Sin embargo, el codigo anterior se nos duplica, para evitar ésta duplicación, pasamos un conjunto de asignaciones a ggplot(). ggplot2 tratará estos mapeos como mapeos globales que se aplican a cada geom en el gráfico.

- Class: cmd_question
  Output: Podemos alpicar un filtro a la función geom_smooth de la siguiente manera, ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == "subcompact"),se = FALSE).Escribe la función para que visualices el resultado.
  CorrectAnswer: ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == "subcompact"),se = FALSE)
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == "subcompact"),se = FALSE)')
  Hint: Ejecuta; ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == "subcompact"),se = FALSE)

- Class: text
  Output: El argumento de datos locales en geom_smooth () anula el argumento de datos globales en ggplot () solo para esa capa esto lo hace con se = FALSE.

- Class: text
  Output: Acontinuación, se verá como hacer una gráfica de barras.

- Class: text
  Output: Para hacer una grafica de barras a la función ggplot(data = mpg) le agreagamos la función geom_bar.

- Class: cmd_question
  Output: Realiza una grafica de barras agregando a ggplot(data = mpg) la función geom_bar, pasandole como variable hwy al parametro aes, recuerda que aes va dentro de las funciones adicionales a la función ggplot.
  CorrectAnswer: ggplot(data = mpg) + geom_bar(mapping = aes(x = hwy))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_bar(mapping = aes(x = hwy))')
  Hint: Ejecuta; ggplot(data = mpg) + geom_bar(mapping = aes(x = hwy))

- Class: text
  Output: Para recrear la gráfica anterior o culquiera utilizamos la función stat_count.

- Class: cmd_question
  Output: Recrea la función anterior utilizando la funcion stat_count.
  CorrectAnswer: ggplot(data = mpg) + stat_count(mapping = aes(x = hwy))
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + stat_count(mapping = aes(x = hwy))')
  Hint: Ejecuta; ggplot(data = mpg) + stat_count(mapping = aes(x = hwy))

- Class: text
  Output: Esto funciona porque cada geom tiene una estadística predeterminada, y cada estadística tiene un geom predeterminado. Esto significa que normalmente puede usar geoms sin preocuparse por la transformación estadística subyacente.

- Class: text
  Output: Para cambiar la estadistica predeterminada, en el siguiente código se cambia *geom_bar()* de conteo a la identidad, esto nos pemite modificar la altura de las barras de una altura ya asignada por la variable *y*.

- Class: text
  Output: Primero tenemos que definir la altura de las barras, esto lo logramos con la tabla tribble asignando a la variable "a" la barra y a la variable "b" el tamaño de la barra.

- Class: cmd_question
  Output: Para verificar lo anterior, contruye la tabla con la función antes mencionada, tomando en cuenta que para la columna ~a los nombres de las barras seran intervalo_1,intervalo_2 e intervalo_3, para la columna ~b las alturas seran de 10,20 y 35. Recuerda guardar eta tabla en una variable la cual llamaras demo.
  CorrectAnswer: demo <- tribble(~a,~b,"intervalo_1", 10,"intervalo_2", 20,"intervalo_3", 35)
  AnswerTests: omnitest(correctExpr='demo <- tribble(~a,~b,"intervalo_1", 10,"intervalo_2", 20,"intervalo_3", 35)')
  Hint: Ejecuta; demo <- tribble(~a,~b,"intervalo_1", 10,"intervalo_2", 20,"intervalo_3", 35)

- Class: cmd_question
  Output: Ahora escribe la función con ggplot para mostrar la gráfica de barras para el data fgrame que creamos llamado demo.
  CorrectAnswer: ggplot(data = demo) + geom_bar(mapping = aes(x = a, y = b), stat = "identity")
  AnswerTests: omnitest(correctExpr='ggplot(data = demo) + geom_bar(mapping = aes(x = a, y = b), stat = "identity")')
  Hint: Ejecuta; ggplot(data = demo) + geom_bar(mapping = aes(x = a, y = b), stat = "identity")

- Class: text
  Output: Si quisieramos modificar el mapeo por estáticas predeterminado (una de conteo por ejemplo) a una gráfica de barras de proporción.

- Class: cmd_question
  Output: Escibe la siguiente función para verificar lo dicho anteriormente ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)).
  CorrectAnswer: ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))')
  Hint: Ejecuta; ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
  
  

- Class: text
  Output: Para resaltar las estádisticas de formación de tú código.

- Class: cmd_question
  Output: Escribe la siguiente función y visualiza los cambios realizados ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
  CorrectAnswer: ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)')
  Hint: Ejecuta; ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)

- Class: cmd_question
  Output: Escribe la siguiente función y visualiza los cambios realizados ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
  CorrectAnswer: ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)')
  Hint: Ejecuta; ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)

- Class: cmd_question
  Output: Escribe la siguiente función y visualiza los cambios realizados ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
  CorrectAnswer: ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)')
  Hint: Ejecuta; ggplot(data = diamonds) + stat_summary(mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median)

- Class: text
  Output: Se puede colorear una gráfica de barras usando tanto la estetica color o fill.

- Class: text
  Output: En caso de aplicar la estetica fill a alguna otra variable como clarity observaremos que se representará la variable con diferentes colores dentro de las barras, el cual es realizado automaticamente por el ajuste de posición especificado por el argumento position.

- Class: cmd_question
  Output: Modifica la función  de ggplot, y en la función geom_bar utiliza fill = clarity y compara lo dico con el resultado.
  CorrectAnswer: ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))')
  Hint: Ejecuta; ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))

- Class: text
  Output: Existen varias opciones para evitar que se arreglen de manera automática. position = "identity" pone cada objeto exactamente donde debe ir en el contexto del gráfico. La gran desventaja de usarlo en una gráfica de barras es que se colocan una sobre otra.

- Class: cmd_question
  Output: Para verificar lo dicho anteriormente escribe la siguiente variación de la función ggplot ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(alpha = 1/5, position = "identity")
  CorrectAnswer: ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(alpha = 1/5, position = "identity")
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(alpha = 1/5, position = "identity")')
  Hint: Ejecuta; ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + geom_bar(alpha = 1/5, position = "identity")

- Class: text
  Output: Position = "fill" funciona como el apilamiento, pero hace cada set de barras de la misma altura, lo que lo hace ideal para comparar proporciones en grupos.

- Class: cmd_question
  Output: Modifica la finción ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) con psition = "identity" y verifica lo antes dicho.
  CorrectAnswer: ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")')
  Hint: Ejecuta; ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")

- Class: text
  Output: position = "dodge" pone objetos que se traslapan directamente uno tras otro. Esto hace mas fácil comparar valores individuales

- Class: cmd_question
  Output: Como en el ejercicio anterior pero ahora asignale a position la palabra dodge.
  CorrectAnswer: ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = clarity), position = "dodge")
  AnswerTests: omnitest(correctExpr='ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = clarity), position = "dodge")')
  Hint: Ejecuta; ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = clarity), position = "dodge")

- Class: text
  Output: Hay otro tipo de ajuste que no es ideal para gráficas de barras, pero si para gráficas de puntos. Normalmente los puntos que estan expresados en una gráfica de puntos es un redondeo de los registros que se estan tomando en cuenta, y ademas no muestra el grueso de las muestras, dejandonos solo con los datos representatyivos, mas no el volumen. Esto se puede evitar usando el ajuste "jitter".

- Class: text
  Output: position = "jitter" añade una pequeña cantidad de ruido aleatorio a cada punto.

- Class: cmd_question
  Output: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
  CorrectAnswer: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
  AnswerTests: omnitest(correctExpr='ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")')
  Hint: Ejecuta; ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")

- Class: text
  Output: Ahora pasemos a los sistemas coordinados. El sistema coordinado carteciano esta por determinado, donde la posición de x y de y actuan de manera independiente que buscan la localización de cada punto. Son un número de otros sistemas coordinados ocacionalmente útil. 

- Class: text
  Output: coord_flip() --> cambia los ejes x e y. Esto es usado si quieres un diagrama de cajas horizontal.

- Class: text
  Output: coord_quickmap() --> establece la relación de aspecto correctamente para los mapas. Es importante si trazas datos espaciales.


- Class: text
  Output: Un ejemplo sería ggplot(nz, aes(long, lat, group = group)) + geom_polygon(fill = "white", color ="black") + coord_quickmap()

- Class: text
  Output: coord_polar --> usado para las coordenadas polares.

- Class: text
  Output: Las coordenadas polares revelan una interconexión sobre una gráfica de barras y una gráfica coxcomb.

- Class: text
  Output: Quedando el ejemplo de la siguiente manera tomando los datos del data frame diamonds --> bar <- ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL)

- Class: text
  Output: Es posible convertir una gráfica de barras apiladas a una gráfica de pastel de la siguiente forma --> ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill") + coord_polar()

- Class: text
  Output: labs() Permite manipular las etiquetas de todos los datos para mostrar los nombres completos o añadir subtitulos para explicar datos.
