- Class: meta
  Course: swirl-rfordatascience
  Lesson: 15_functions
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3
  
- Class: text
  Output: En esta lección aprenderas a escribir funciones para automatizar tareas en el copiado y pegado de datos. Asegurate de tener instalada la paquetería de stringr(library(stringr)).

- Class: text
  Output: Las ventajas de crear funciones se pueden resumir en(:)

- Class: text
  Output: Puedes renombrar la función de manera personalizada para hacer de tu codigo uno mas legible y facil de entender, llamando una función que recorre un archivo como lectura() por ejemplo.

- Class: text
  Output: Para cuestiones de requisitos de cambios cuando se trabaja con un equipo en un programa, puedes llevar a cabo los cambios en un solo lugar, en vez de multiples lineas.

- Class: text
  Output: Eliminas la probabilidad de errores en el copiado y pegado que un humano pueda cometer si no usas la recursividad de las funciones.

- Class: text
  Output: La mejor forma de saber si necesitas de una función es cuando tienes dos o mas tareas ejecutandose en tu codigo que hacen exactamente lo mismo, o hacer una acción de manera recursiva en varios objetos a la vez, como sumas, restas, conversiones de datos, etc. 

- Class: text
  Output: Una clave para empezar a transformar codigo en una función es evaluar cuantas entradas y salidas contienen, reemplazandolas por variables temporales con nombres generales, para poder identificar las entradas y salidas.

- Class: text
  Output: Hay 3 pasos clave para transformar un código en una función(:)

- Class: text
  Output: 1. Escoger un nombre para la función, que sea descriptivo de lo que el código lleva a cabo de manera corta y concisa.

- Class: text
  Output: 2. Un listado de las entradas o argumentos de entrada que seran procesados dentro de la función, pueden ser uno o varios argumetos.

- Class: text
  Output: 3. Pones el codigo que has desarrollado en el cuerpo de la función entre {}

- Class: text
  Output: Veamos un ejemplo sencillo en el que tendrías que repetir código para completar la taréa.

- Class: cmd_question
  Output: Crea un data frame con el siguiente código df <- data.frame(a = c(1:5), b = c(4:8))
  CorrectAnswer: df <- data.frame(a = c(1:5), b = c(4:8))
  AnswerTests: omnitest(correctExpr='df <- data.frame(a = c(1:5), b = c(4:8))')
  Hint: Usa el código que se te proporcionó.

- Class: cmd_question
  Output: Escribe df para que visualices el data frame.
  CorrectAnswer: df
  AnswerTests: omnitest(correctExpr='df')
  Hint: Escribe df.

- Class: text
  Output: El problema es que te piden que los valores estén en números decimales.

- Class: text
  Output: Una forma de hacerlo sería por columnas.

- Class: text
  Output: df$a <- df$a / 10

- Class: text
  Output: df$b <- df$b / 10

- Class: text
  Output: Se ve muy sencilla pero que pasa cuando tienes un gran número de columnas

- Class: text
  Output: 1 El error humano es decir que te equivoques al copiar y pegar.

- Class: text
  Output: 2 No es nada eficiente que estes copiando, pegando y mdoficando código para cada columna.

- Class: text
  Output: Ahora te proporcionaremos el código de una función para hacer más rápido el proceso.

- Class: text
  Output: decimal <- function(x) { for (i in seq_along(x)) { x[i] <- x[[i]] / 10  }; x}



- Class: mult_question
  Output: Qué pasaría si corro el siguiente código? decimal(df)
  AnswerChoices: Vuelve los números de la diagonal decimales;Todos los números se vuelven decimales;Ningún número se vuelve  decimal
  CorrectAnswer: Todos los números se vuelven decimales
  AnswerTests: omnitest(correctVal='Todos los números se vuelven decimales')
  Hint: Revisa como funciona cada parte de la función.



- Class: text
  Output: Como te podrás imaginar esta función habría modificó el dataframe y tendría puros valores en decimal. (Sí quieres hacerlo sólo tendrás que copiar y pegar la función aun script de R)

- Class: text
  Output: Es importante recalcar que no hay una fórmula que te diga exactamente que hacer para crear la función que necesitas.

- Class: text
  Output: Por que no existe una solución única.

- Class: text
  Output: Por lo tanto deberás practicar para que desarrolles tu intución y seas capaz de crear las funciones que necesites.

- Class: text
  Output: Lo ejemplificaremos con otra función que hace lo mismo que la anterior.
  
- Class: text
  Output: Aquí el código.
  
- Class: text
  Output: decimal2 <- function(x) { for (i in 1:length(x)){ x[i] <- x[i] /10 }; x }


- Class: text
  Output: Cada quien tiene su forma de entender las funciones por eso te decimos que no hay una fórmula exacta para que las hagas.


- Class: text
  Output: Al nombrar las funciones debes tener encuenta que la computadora no es la única que va a leer tú código por lo que debe ser entendible tanto para ti como para otros humanos.

- Class: text
  Output: Es preferible que utilices una sóla palabra pero si te parece más entendible poniendole más palabras procura separarlas con un guión bajo o que cada palabra comience con mayúscula.

- Class: text
  Output: No importa que forma de nombrar a las funciones elijas, lo que si importa es que seas consistente y cada función que hagas la nombres con el mismo formato.

- Class: text
  Output: Es importane por que vuelve tu código más legible.

- Class: text
  Output: Ahora si tienes un familia de funciones que hacen cosas similares o sirven al mismo objetivo es importante que haya consistencia tanto en sus nombres como en sus argumentos.

- Class: text
  Output: Por ejemplo

- Class: text
  Output: tienes las funciones

- Class: text
  Output: make_mult()

- Class: text
  Output: make_sum()

- Class: text
  Output: make_fact()

- Class: text
  Output: Sí en algún momento olvidas el nombre de la función que necesitas, todo será tan simple como escribir make y gracias al autocompletado podrás ver las funciones disponibles.

- Class: text
  Output: R ya tiene muchas funciones tanto en sus base como en las paqueterías por lo que te recomendamos que antes de hacer una función verifiques si no existe en alguna de las opciones anteriores.

- Class: text
  Output: Algo que puede ser muy útil tanto para ti como para las personas que vean tú código es comentarlo.

- Class: text
  Output: Así podrás explicar paso por paso lo que hace o poner palabras clave para que no tengas confución alguna.

- Class: text
  Output: Es tan simple como poner el signo de # y escribir lo que desees.

- Class: text
  Output: Ahora veremos condicionales

- Class: text
  Output: Cuando comiences a generar código más complejo muchas veces querrás que dependiendo del valor de cierta condición (Que tu vas a definir) se ejecute una u otra parte del código.

- Class: text
  Output: Bueno esto lo vas a hacer con condicionales.

- Class: text
  Output: Un condicional en r se declara como un 

- Class: text
  Output: if (condición) {#Código a ejecutar si la condición es verdadera} else {#Código a ejecutar si la condición es falsa}

- Class: text
  Output: Veamos  una función muy sencilla como ejemplo

- Class: text
  Output: Nuestra función recibirá la medida de dos lados con intersección en una figura geométrica y nos dirá si se trata de un rectángulo o de un cuadrado.
  
- Class: text
  Output: El código que vas a utilizar es 


- Class: text
  Output: tipoFig <-function(a,b) { if(a == b) {print("Es un cuadrado")} else { print( "Es un rectángulo")}}



- Class: text
  Output: La condición debe ser evaluada como verdadera o falsa.

- Class: text
  Output: En caso de que utilices un vector como condición te arrojará un mensaje de warning advirtiendote que sólo tomará el primer valor del vector como condición.

- Class: text
  Output: Tampoco podrás poner NA como la única condición por que esto dará error al ser ejecutado.

- Class: text
  Output: Habrá casos en los que quieras poner más de una condición, afortunadamente existe una herramienta para esto.

- Class: text
  Output: Se utiliza || para referirse a un or.

- Class: text
  Output: Se utiliza & para referirse a un and.

- Class: text
  Output: Estos puedes usarlos para crear multiples expresiones lógicas.

- Class: text
  Output: Es importante que que tengas cuidado con la lógica de tus expresiones para que las condiciones funcionen de la manera correcta. Hagamos un ejercicio para ejemplificar un clásico error.



- Class: text
  Output: Para que no hay dudas veremos congruencias (con 0) como nota rápida.

- Class: text
  Output: En matemáticas un número tiene congruencia 0 con otro si al dividir el primero por el segundo se tiene residuo 0.

- Class: text
  Output: Es decir si hicieras x congruente con 2 y lo aplicaras a los números naturales ( cero a infinito) todos los números pares cumplirían la condición.

- Class: text
  Output: En R congruencia es representada por %%.

- Class: text
  Output: Vamos al ejercicio.

- Class: mult_question
  Output: Sí te doy la siguiente condición if ((x %% 2 == 0 || x %% 3 == 0) & (x %% 7 == 0)) {} y el vector b = c(2, 3, 4, 5, 6, 7, 8). ¿Qué números cumplen?
  AnswerChoices: (2, 3, 4, 6, 7, 8);(2, 3, 7);(7);(ninguno)
  CorrectAnswer: (ninguno)
  AnswerTests: omnitest(correctVal='(ninguno)')
  Hint: Revisa las implicaciones.

- Class: text
  Output: Un poco engañoso no?

- Class: text
  Output: Tienes dos condiciones pero al tener el & entre ellas obliga a que las dos se cumplan para que obtener un verdadero.

- Class: mult_question
  Output: Ahora con está condición if ((x %% 2 == 0 || x %% 7 == 0) & (x %% 7 == 0)) {} y el vector b = c(2, 3, 4, 5, 6, 7, 8). ¿Qué números cumplen?
  AnswerChoices: (2, 4, 6, 7, 8);(2, 7);(7);(ninguno);(todos)
  CorrectAnswer: (7)
  AnswerTests: omnitest(correctVal='(7)')
  Hint: Utiliza la lógica del ejercicio anterior.



- Class: text
  Output: Bien hecho, al tener un or en la primera condición admitía congruentes tanto con dos como con 7 pero al aplicar las segunda condición el único valor que cumple es el 7.

- Class: text
  Output: Ahora veremos condiciones multiples.

- Class: text
  Output: Estas son muy útiles cuando quieres que cuando los valores cumplan distintas condiciones se les apliquen distintas operaciones.

- Class: text
  Output: La estructura es de la siguiente forma.

- Class: text
  Output: if (condición1) {acción1} else if (acción2) {} else { otra acción}

- Class: text
  Output: Claro que va con sus saltos de línea y espacios correspondientes.

- Class: text
  Output: Ten cuidado por que las condiciones se aplican de manera ordenada así que trata de poner las más específicas al incio para que los datos se vayan a la condición que deseas.

- Class: text
  Output: Veamos un ejemplo.

- Class: text
  Output: Sí tu pones el siguiente código.

- Class: text
  Output: if (x %% 2 == 0) {} else if (x %% 2 & x %% 3){} else {}

- Class: text
  Output: Todos los números congruentes con 2 van a entrar en el primer if siendo que en el segundo podrían entrar algunos de ellos, entonces no tendría ningun sentido tener el primer argumento del segundo if. Pero si intercambian sus argumentos el primer y el segundo if entonces se tomarían los valores  de la manera correcta y ya no habría incongruencias.

- Class: text
  Output: Cuando se tienen demasiadas condiciones por separado se vuelve tedioso tener demasiados if's pero no te preocupes por que R tiene una herramienta para eso.

- Class: text
  Output: Se llama switch() y funciona como uno.

- Class: text
  Output: Veamos un ejemplo para que quede más claro.

- Class: text
  Output: ejemplo <- function(x, y, op) { switch(op, raiz = x ** (1/y), exponencial = x ** y, stop("Unknown op!")}

- Class: text
  Output: Para llamarla tendrías que escribir ejemplo(número x, número y, "elección")

- Class: text
  Output: Estilo de código

- Class: text
  Output: Lo que verás a continuación son buenas practicas al escribir funciones.

- Class: text
  Output: Siempre debes utilizar llaves {} en las funciones y el contenido debe tener sangría de dos espacios.

- Class: text
  Output: De está manera será mucho más sencillo ver la jerarquía en el código.

- Class: text
  Output: Una llave de apertura nunca debe estar sola en un ĺínea, por el contrario una llave de termino siempre debe de tener su propia línea a menos que siga un else en código.

- Class: text
  Output: Puedes omitir las llaves sí la declaración de tu if es muy corta.

- Class: text
  Output: Por ejemplo

- Class: text
  Output: if (calificación < 6) "Reprobado" else "Aprobado"

- Class: text
  Output: En una declararción más larga, la forma completa es más fácil de leer.

- Class: text
  Output: Argumentos en las funciones

- Class: text
  Output: Normalmente los argumentos se dividen en dos grupos, los datos con los que se va a hacer el cálculo y los argumentos que controlan los detalles del cálculo.

- Class: text
  Output: Por ejemplo en la función de switch que vimos en la lección el dato es el número al que se le quiere sacar la raìz o elevar aun exponente y los detalles es el valor al que se va a elevar el primer número o la raíz que se va a aplicar.

- Class: text
  Output: Otro ejemplo.

- Class: text
  Output: En la función log() los datos es el número al que se le aplica el logaritmo y los detalles son la base del logaritmo.

- Class: text
  Output: En general al enunciar una función lo primero que se pone son los datos seguidos por los argumentos.

- Class: text
  Output: Otra cosa que puedes hacer es definir argumentos que tengan un valor por default.

- Class: text
  Output: De esta manera no tienes que especificar su valor cada que la uses.

- Class: text
  Output: Veamos un ejemplo con la función ejemplo que utilizamos anteriormente.

- Class: text
  Output: ejemplo <- function(x, y = 2, op) { switch(op, raiz = x ** (1/y), exponencial = x ** y, stop("Unknown op!")}

- Class: text
  Output: Si te fijas podrás ver que en los argumentos de la función y = 2 lo que significa que si al mandar llamar la función no especificas la raiz o exponente dependiendo del tercer argumento, el valor de y será 2.

- Class: text
  Output: Es importante recalcar que el default value que utilices debe ser el que vas a utilizar más comunmente.

- Class: text
  Output: Veamos un ejemplo muy importante 

- Class: text
  Output: Tendría sentido que en los argumentos de la función pusieras na.rm = FALSE por default pues es importante notar donde están los valores faltantes sin embargo cuando escribas código lo más común será que definas na.rm = TRUE.

- Class: text
  Output: Como ya sabrás para facilitar la lectura es importante mantener ciertas normas.

- Class: text
  Output: 1 Siempre dar un espacio despues de cada coma.

- Class: text
  Output: 2 Dejar dos espacios uno antes y otro despues de cada signo de igual.

- Class: text
  Output: Elegir nombres.

- Class: text
  Output: Aun que no lo parezca los nombres de los argumentos también son importantes.

- Class: text
  Output: En general vas a preferir tener nombres descriptivos pero hay un puñado de nombres cortos que vale al pena aprender.

- Class: text
  Output: 1 x, y, z como vectores.

- Class: text
  Output: 2 w como vector de peso.

- Class: text
  Output: 3 df como data frame.

- Class: text
  Output: 4. i, j como índices numéricos.

- Class: text
  Output: 5 n para medir el largo o número de filas.

- Class: text
  Output: 6 p como número de columnas.

- Class: text
  Output: Checando Valores.

- Class: text
  Output: A medida que comiences a escribir más funciones llegará el punto en que no recuerdes exactamente como funcionan tus funciones.

- Class: text
  Output: Llegado ese punto será fácil que metas argumentos incorrectos.

- Class: text
  Output: Para evitar esto es recomendable que uses restricciones explícitas. Por ejemplo

- Class: text
  Output: Digamos que tienes una función que recibe como argumento dos números y como objetivo tiene dividir el primer número sobre el segundo.

- Class: text
  Output: division <- function(x, y) { x / y }

- Class: text
  Output: Sí a esta función se te ocurre meterle un 0 como segundo argumento no te va mandar ningun error, lo único que va a arrojar es que el valor resultante es infinito.

- Class: text
  Output: Aun que la computadora arroje un valor, matemáticamente habalndo es incorrecto dividir un número por 0. Ves a lo que nos referimos cuando decimos que puede llevar a confusiones?

- Class: text
  Output: Pero qué puedes hacer para corregir esto?

- Class: text
  Output: Restricciones, aquí te va un ejemplo con la función anterior.

- Class: text
  Output: division <- function(x, y) { if (y == 0) { stop("y debe ser diferente a 0")}; x / y }

- Class: text
  Output: Tampoco debes de pasarte al otro extremo en el que pones demasiadas condiciones ya que con eso puedes complicar sin razón tu función. Esto claro si no tienes demasiada experiencia con funciones.

- Class: text
  Output: Con el tiempo y la practica podrás hacer funciones cada vez más robustas.

- Class: text
  Output: Punto-punto-punto

- Class: text
  Output: Algunas funciones no tienen un número definido de argumentos a recibir es decir que así como pueden ser dos, podrían ser 100.

- Class: text
  Output: Veamos otro ejemplo de función.
  
  
  
- Class: text
  Output: ordenar <- function(...){str_order(...)}
  
- Class: text
  Output: Lo que hace esta función es ordenar de manera ascendente una serie de números.
  
- Class: text
  Output: Pero el beneficio que te otorgan los tres puntos es que esa serie puede ser tan larga como quieras, por que puede recibir muchos argumentos.

- Class: text
  Output: No importa si introduces ordenar(c(3, 2, 1)) u ordenar(9, 8, 7, 6, 5, 4, 3, 2, 1)

- Class: text
  Output: El resultado de la primera será 1 2 3
  
- Class: text
  Output: y el resultado de la segunda será 1 2 3 4 5 6 7 8 9

- Class: text
  Output: Lo ordena de manera ascendente y funciona con tres argumentos.


- Class: text
  Output: Pero también funciona con 9 argumentos (Lo puedes probar en un scrip de R).

- Class: text
  Output: Una de las últimas cosas que ves al crear tu función es el valor que te va a regresar y es curioso por que ese valor es por lo que hiciste la función en primer lugar.

- Class: text
  Output: Generalmente el valor que regresa la función es la última declaración que evalua. 

- Class: text
  Output: CLaro que puedes apresuarar a modificar esto con la función return().

- Class: text
  Output: Puedes ponerlo en caso de que se cumpla alguna condición.

- Class: text
  Output: Por ejemplo.

- Class: text
  Output: division <- function(x, y) { if (y == 0) { return("y debe ser diferente a 0")}; x / y }

- Class: text
  Output: Entonces queda claro que puedes dar un return distinto dependiendo de las condiciones que se cumplan dentro de tu función.

- Class: text
  Output: Ya para terminar te hablaremos de que tipo de funciones estás creando y lo que deben cumplir.

- Class: text
  Output: Pueden ser de transformación o de efecto secundario.

- Class: text
  Output: Las de transformación son en las que hay un claro objeto de entrada que es transformado por la función que regresa un función modificada del mismo.

- Class: text
  Output: Las segundas son en las que se les llama para que realizen un acción como puede ser generar o guardar un archivo estas funciones deben regresar de manera invisible el argumento, para que no se escriba de forma automática existe la función invisible()

- Class: text
  Output: Felicidades hemos terminado el curso.





