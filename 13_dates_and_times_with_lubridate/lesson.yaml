- Class: meta
  Course: swirl-rfordatascience
  Lesson: 13_dates_and_times_with_lubridate
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: En este capitulo nos consentraremos en analizar los datos en días y horas, hay tres maneras en las que podemos crear un fecha y hora


- Class: text
  Output: La primera forma de creación es por un string o caracteres, para esto necesitaremos de lubridate. Para hacer la representación de una fecha tenemos tres maneras, la primera es la función ymd("2018-06-25"), la segunda mdy("March 17th, 2018") y por ultimo dmy("25-Jan-2017") de las tres formas siempre sacan el mismo resultado

- Class: cmd_question
  Output: Escribe la fecha 2018-12-12 con la función ymd
  CorrectAnswer: ymd("2018-12-12")
  AnswerTests: omnitest(correctExpr='ymd("2018-12-12")')
  Hint: vamos tú uedes!

- Class: cmd_question
  Output: Escribe la fecha March 31ts, 2018 con la función mdy
  CorrectAnswer: mdy("March 31ts, 2018")
  AnswerTests: omnitest(correctExpr='mdy("March 31ts, 2018")')
  Hint: vamos tú uedes!

- Class: cmd_question
  Output: Escribe la fecha 31-Enero-2019 con la función dmy
  CorrectAnswer: dmy("31-Enero-2019")
  AnswerTests: omnitest(correctExpr='dmy("31-Enero-2019")')
  Hint: vamos tú uedes!

- Class: text
  Output: Ahora para poder agregar una hora a las fechas es "_hm", por ejemplo ymd_hm("2018-12-12 19:15:56")

- Class: text
  Output: Ahora veremos como analizar las fechas y horas por sus componentes individuales, del conjunto de datos flights

- Class: cmd_question
  Output:  Seleccionaremos los años, meses, días, horas y minutos, para esto utiliza la funcion select()
  CorrectAnswer: flights %>% select(year, month, day, hour, minute)
  AnswerTests: omnitest(correctExpr='flights %>% select(year, month, day, hour, minute)')
  Hint: la expresión es flights %>% select(year, month, day, hour, minute)

- Class: text
  Output: Ahora, si queremos que los vectores de la fecha aparescan en un solo vector dentro de flights usaremos la funsión mutate y como argumento "nombre del vector" = make_date(), pero si también queremos que salga la hora a make_date lo combiamos por make_datetime

- Class: cmd_question
  Output: De la función anterior modificala para que en el vector "nuevo" contenga la fecha y hora completos, utiliza la funsión make_datetime()
  CorrectAnswer: flights %>% select(year, month, day, hour, minute) %>% mutate( nuevo = make_datetime(year, month, day, hour, minute))
  AnswerTests: omnitest(correctExpr='flights %>% select(year, month, day, hour, minute) %>% mutate( nuevo = make_datetime(year, month, day, hour, minute))')
  Hint: La expresión  queda como flights %>% select(year, month, day, hour, minute) %>% mutate( nuevo = make_datetime(year, month, day, hour, minute))


- Class: text
  Output: Ahora agruparemos los datos de las cuatro columnas de tiempo, para esto utilizaremos el modulo para extraer los datos.

- Class: cmd_question
  Output: Ahora lo que se te pide que hagas es extraer el modulo de las dos columnas que pertenecen a time, para esto utilizaras la siguiente expresión make_datetime_100 <- function(year, month, day, time) {make_datetime(year, month, day, time %/% 100, time %% 100)}
  CorrectAnswer: make_datetime_100 <- function(year, month, day, time) {make_datetime(year, month, day, time %/% 100, time %% 100)}
  AnswerTests: omnitest(correctExpr='make_datetime_100 <- function(year, month, day, time) {make_datetime(year, month, day, time %/% 100, time %% 100)}')
  Hint: Type a hint.

- Class: text
  Output: Ahora con la funsión anterior ya podemos filtrar los vectores hours y minutes

- Class: cmd_question
  Output: Para filtrar los datos crearemos un dataframe donde filtraremos los datos para no tener valores NA dentro de la nueva agrupación  por lo tanto la expresión es vuelos <- flights %>% filter(!is.na(dep_time), !is.na(arr_time))
  CorrectAnswer: vuelos <- flights %>% filter(!is.na(dep_time), !is.na(arr_time))
  AnswerTests: omnitest(correctExpr='vuelos <- flights %>% filter(!is.na(dep_time), !is.na(arr_time))')
  Hint: Vamos tú puedes!!

- Class: cmd_question
  Output: A la expresión anterior le agregaremos la funsión de mutate para que le pasemos a los vectores definidos anteriormente, los valores agrupados de las fechas y de las horas de los vuelos, la funsión de mutate quedaría mutate(dep_time = make_datetime_100(year, month, day, dep_time),arr_time = make_datetime_100(year, month, day, arr_time),sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)), escribe de nuevo la expresión anterior y agregale la funsión mutate descrita anteriormente.
  CorrectAnswer: vuelos <- flights %>% filter(!is.na(dep_time), !is.na(arr_time)) %>% mutate(dep_time = make_datetime_100(year, month, day, dep_time),arr_time = make_datetime_100(year, month, day, arr_time),sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),sched_arr_time = make_datetime_100(year, month, day, sched_arr_time))
  AnswerTests: omnitest(correctExpr='vuelos <- flights %>% filter(!is.na(dep_time), !is.na(arr_time)) %>% mutate(dep_time = make_datetime_100(year, month, day, dep_time),arr_time = make_datetime_100(year, month, day, arr_time),sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),sched_arr_time = make_datetime_100(year, month, day, sched_arr_time))')
  Hint: la expresion correcta es "vuelos <- flights %>% filter(!is.na(dep_time), !is.na(arr_time)) %>% mutate(dep_time = make_datetime_100(year, month, day, dep_time),arr_time = make_datetime_100(year, month, day, arr_time),sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),sched_arr_time = make_datetime_100(year, month, day, sched_arr_time))"

- Class: cmd_question
  Output: Ahora comprueba que en verdad se icienron los agrupamientos correctamente y con los formatos correctos de las fechas y las horas de cada vuelo, para esto manda a llamar la variable donde se guardaron los cambios
  CorrectAnswer: vuelos
  AnswerTests: omnitest(correctExpr='vuelos')
  Hint: Solo escribe vuelos

- Class: text
  Output: Si se decea visualzar estos nuevos conjuntos de datos con sus respectivos nombres de vuelos lo único que  tendriamos que agregarle a la expresión de vuelos es la funsión select, de la cual desplegariamos los conjuntos origin, dest, ends_with("delay"), ends_with("time"), estas dos ultimas muestran los conjuntos con terminación delay y time

- Class: cmd_question
  Output: Para no quedarnos con las dudas a la variable "vuelos" aplicale la funsión select() y como argumentos usarás el nombre de los conjuntos antes mencionados
  CorrectAnswer: vuelos %>% select(origin, dest, ends_with("delay"), ends_with("time"))
  AnswerTests: omnitest(correctExpr='vuelos %>% select(origin, dest, ends_with("delay"), ends_with("time"))')
  Hint: la expresión correcta es vuelos %>% select(origin, dest, ends_with("delay"), ends_with("time"))

- Class: text
  Output: De las agrupasiones realizadas anteriormente podríamos sacar más información, como por ejemplo, sacar la gráfica de las frecuencias de los vuelos en un sierto periodo de tiempo 

- Class: cmd_question
  Output: Para gráficar la fecuencia de vuelos en un peroido de tiempo por ejemplo 80000 segundos en el día, veremos la frecuencia de vuelos en este periodo de tiempo, la expresión sería vuelos %>% ggplot(aes(sched_dep_time)) + geom_freqpoly(binwidth = 80000), expresala en la consola.
  CorrectAnswer: vuelos %>% ggplot(aes(sched_dep_time)) + geom_freqpoly(binwidth = 80000)
  AnswerTests: omnitest(correctExpr='vuelos %>% ggplot(aes(sched_dep_time)) + geom_freqpoly(binwidth = 80000)')
  Hint: No te desanimes, si puedes!

- Class: cmd_question
  Output: Del conjunto que hicimos en los ejercicios anteriores tambien podemos tratar al conjunto por sus componentes, por ejemplo de date_time, podemos hacer un histograma con los vuelos que salen por segundos en cada mes del año. para esto la expresíon a utilizar es vuelos %>% mutate(wday = wday(dep_time, label = TRUE)) %>% ggplot(aes(x = wday)) + geom_bar()  
  CorrectAnswer: vuelos %>% mutate(wday = wday(dep_time, label = TRUE)) %>% ggplot(aes(x = wday)) + geom_bar()  
  AnswerTests: omnitest(correctExpr='vuelos %>% mutate(wday = wday(dep_time, label = TRUE)) %>% ggplot(aes(x = wday)) + geom_bar()  ')
  Hint: vamos tú puedes 
