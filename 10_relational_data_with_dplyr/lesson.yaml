- Class: meta
  Course: swirl-rfordatascience
  Lesson: 10_relational_data_with_dplyr
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Datos relacionales con dplyr

- Class: text
  Output: Cuando se hace análisis de datos es muy raro el caso en el que se usa una única tabla de datos que contenga todo lo que necesitamos.

- Class: text
  Output: Típicamente existen varias tablas con distinta información y es necesario combinarlas para poder responder preguntas en las que estás interesado.


- Class: text
  Output: Para que esto quede más claro veremos un ejemplo sencillo. Digamos que tienes dos tablas, una de los estudiantes que asisten a una escuela. En esta table puedes ver la inforamción de cada estudiante desde su id de identificación hasta el grado escolar al que pertecen. En la segunda tabla tienes tienes el id de cada alumno y sus asistencias por fechas, entonces se te pide que digas el índice de asistencia del día de ayer por cada grado escolar.

- Class: text
  Output: Como ninguna de las dos tablas te puede dar la respuesta que necesitas por si misma. Intuitivamente suena lógico pensar que necesitas unir la información de ambas tablas, pero cómo, es decir de manera manual sería muy ineficiente. Aquí es donde entran las herramientas que veremos en el curso.

- Class: text
  Output: A este tipo de conjunto de datos se le llama datos relacionales. Cualquier otra relación entre tablas parte de esta simple idea.

- Class: text
  Output: Para trabajar con datos relacionales necesitas funciones que trabajen con pares de tablas. Existen tres familias de funciones que trabajan con datos relacionales y son 

- Class: text
  Output: 1 Mutating Joins ->  Añaden nuevas variables a un data frame de observaciones coincidentes de otra tabla.

- Class: text
  Output: Filtering joins -> Filtran una data frame basado en las observaciones coincidentes de otra tabla relacionada.

- Class: text
  Output: Set operations -> Trata a las observaciones como si fueran conjuntos de elementos.

- Class: text
  Output: Normalmente los datos relacionales están en un sistema de administración de bases de datos relacionales. Sí has trabajado con este tipo de bases de datos, lo más probabe es que has trabajado con SQL, de ser cierto los conceptos de dplyr se te harán familiares aun que la forma de expresarlas es un poco diferente.  

- Class: text
  Output: En general dplyr es un poco más fácil de usar que SQL pues está especializado en el análisis de datos, la desventaja es que cuando se trata de cosas menos comunes en le análisis lo hace un poco más complejo. 

- Class: text
  Output: Como prerequisito para poder ver y entender los ejemplos habrá que instalar las librerías tidyverse y nycflights13

- Class: text
  Output: Lo primero que haremos es explorar la base de datos realcional de nycflights13 ya que más adelante la utilizaremos para aprender de datos relacionales

- Class: cmd_question
  Output: Teclea nycflights13::airlines para que visualices la tabla de airlines que contiene los nombres de las aerolíneas con sus respectivas abreviaturas.
  CorrectAnswer: nycflights13::airlines
  AnswerTests: omnitest(correctExpr='nycflights13::airlines')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Teclea nycflights13::airports para que visualices la tabla de aeropuertos que incluye el nombre de los aeropuertos con su respectiva clave de identificación en la columna faa
  CorrectAnswer: nycflights13::airports
  AnswerTests: omnitest(correctExpr='nycflights13::airports')
  Hint: Escribe lo que se te pidió



- Class: cmd_question
  Output:  Escribe nycflights13::planes para desplegar la tabla de aviones que contiene información con el identificador de cada uno.
  CorrectAnswer: nycflights13::planes
  AnswerTests: omnitest(correctExpr='nycflights13::planes')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Ya para terminar la exploración de esta base teclea nycflights13::weather , esto despliega la tabla clima que da el estado del tiempo de cada aeropuerto de Nueva York por hora.
  CorrectAnswer: nycflights13::weather 
  AnswerTests: omnitest(correctExpr='nycflights13::weather ')
  Hint: Escribe lo que se te pidió


- Class: text
  Output: Hay varias relaciones entre las tablas que acabamos de ver por ejemplo

- Class: text
  Output: La tabla de vuelos 'flights' se conecta con la tabla de aviones llamada 'airports' de dos maneras por la columna origen y la columan destino de la primera tabla a la columna faa de la segunda tabla

- Class: text
  Output: Flights también se conecta con aerolineas por la columna carrier que se encuentra en ambas tablas

- Class: text
  Output: Por último la tabla weather se conecta con flights por la columna origin presente en ambas tablas y el tiempo que engloba el año, mes, día, hora y vuelo.

- Class: text
  Output: Veremos un subtema más y comenzaremos con ejercicios de esta base.

- Class: text
  Output: Las llaves



- Class: text
  Output: Se le denomina llaves a las variables que se utilizan para conectar cada par de tablas, es una variable que idetifica de manera única una observación.

- Class: text
  Output: Por ejemplo cada aeropuerto se puede identificar por su clave única faa


- Class: text
  Output: Aun que existen casos en los que se necesita más de una columna o la convianción de ellas para poder hacer este identificador. Que por cierto es baśico para que un conjunto de datos relacionales funcione de manerea correcta, si no, se pierde la integridad de la inforamción entre otras cosas.

- Class: text
  Output: Existen dos tipos de llaves 

- Class: text
  Output: Las llaves primarias <- estas identifican de manera única una observación en su propia tabla

- Class: text
  Output: Llaves foraneas <- estás identifican una observación en otra tabla

- Class: text
  Output: Un buen ejemplo de esto es la columna flights$origin de la tabla flights por que identifica cada vuelo con su respectivo aeropuerto de origen 

- Class: text
  Output: Aunque también se puede dar le caso en el que una misma columna es llave foránea y primaria a la vez.

- Class: text
  Output: Por ejemplo el año es parte de la llave primaria de flights pero también es llave foránea para relacionar los datos con los de weather.

- Class: text
  Output: Ahora te daremos las llaves primarias de cada tabla para que no haya malentendidos. Piensa si pudiste identificarlas por ti mismo, es un buen ejercicio.

- Class: text
  Output: airports <- faa



- Class: text
  Output: flights <- year, month, day, hour, flight

- Class: text
  Output: planes <- tailnum

- Class: text
  Output: weather <- year, month, day, hour, origin

- Class: text
  Output: airlines <- carrier



- Class: text
  Output: Metimos una tabla extra que también pertencen a nycfights13 te damos su llave foránea, si quieres verla más a fondo puedes correr una línea de código similar a las que usaste para visualizar las otras tablas pero cambiando el nombre correspondiente.

- Class: text
  Output: Cuando estes trabajando con datos relacionales puede que ya hayas identificado tus posibles llaves primarias pero siempre es importante verificar que la llave identifique a una única información.

- Class: text
  Output: Una forma de hacerlo es

- Class: text
  Output: Nota -> utilizaremos pipes para hacer más legibles los códigos '%>%'



- Class: text
  Output: Cabe destacar que es necesario que tengas instalada la paquetería de dyplr así como que la llames con la función library

- Class: text
  Output: Sin más que aclarar vamos al ejercicio!

- Class: cmd_question
  Output: Escribe el código airports %>% count(faa) %>% filter(n > 1)
  CorrectAnswer: airports %>% count(faa) %>% filter(n > 1)
  AnswerTests: omnitest(correctExpr='airports %>% count(faa) %>% filter(n > 1)')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Como puedes ver el código que acabas de correr te arroja un tibble de 0 por 2 los que significa esto es que efectivamente es un llave primaria de la tabla pues no hay repeticiones es decir hay cero repeticiones de valores por lo que nos arrojo el código

- Class: text
  Output: Lo que sigue es que pongas en practica lo que acabas de aprender y hagas lo mismo pero con la tabla weather

- Class: text
  Output: Recuerda que la tabla weather emplea varias de sus variables es decir columnas para para formar sus llaves foráneas.  

- Class: text
  Output: Te recordamos que en weather las columnas que deberías utilizar son year, month, day, hour y origin.

- Class: text
  Output: Vamos al ejercicio

- Class: cmd_question
  Output: Utiliza todas las recomendaciones que se te hicieron anteriormente y determina sí las columnas que te digimos de weather efectivamente forman una llave.
  CorrectAnswer: weather %>% count(year, month, day, hour, origin) %>% filter(n > 1)
  AnswerTests: omnitest(correctExpr='weather %>% count(year, month, day, hour, origin) %>% filter(n > 1)')
  Hint: Recuerda utilizar pipes para escribir tú respuesta y haber incluido todas las columnas que te mencionamos. La estructura es la misma que en el ejercicio anterior.

- Class: text
  Output: Este es un claro ejemplo de que no siempre se tiene una llave primaria explícita por que ninguna combinación de variables nos da un identificación única de cada observación, esto tabién sucede en la tabla de flights.

- Class: text
  Output: Usualmente para solucionar esto se agrega una nueva columna con la función mutate() y row_number(). De esta manera es más fácil identificar las observaciones.

- Class: text
  Output: A esto se le llama llave sustituta.

- Class: text
  Output: Ahora que tienes todas estás herramientas comenzaremos a ver los joins

- Class: text
  Output: Primero veremos los Mutating Joins

- Class: text
  Output: Esta es la primera herramienta que te mostraremos para combinar un par de tablas 

- Class: text
  Output: Lo que hace es emparejar a las observaciones por sus llaves y despues copia los valores correspondientes de cada una para formar la nueva tabla.

- Class: text
  Output: A la hora de trabajar con datos es importante nunca  modificar nuestra base original por lo que se recomienda hacer una copia de la tabla o tablas con las que vayas trabajar.

- Class: text
  Output: En el siguiente ejercicio es justo lo que vas a hacer 

- Class: cmd_question
  Output: Escribe el código vuelos <- flights %>% select(year:day, hour, origin, tailnum, carrier) esto generará una nueva tabla con las variables que seleccionaste.
  CorrectAnswer: vuelos <- flights %>% select(year:day, hour, origin, tailnum, carrier)
  AnswerTests: omnitest(correctExpr='vuelos <- flights %>% select(year:day, hour, origin, tailnum, carrier)')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Ahora para visualizar lo que acabas de hacer escribe vuelos
  CorrectAnswer: vuelos
  AnswerTests: omnitest(correctExpr='vuelos')
  Hint: Escribe vuelos.





- Class: cmd_question
  Output: Ahora veremos el ejemplo de un left join, imagina que quieres agregar la información del aeropuerto de donde salió el vuelo para cada observación. Escribe el código vuelos %>% head(10) %>% left_join(airports, by = c("origin"="faa"))
  CorrectAnswer: vuelos %>% head(10) %>% left_join(airports, by = c("origin"="faa"))
  AnswerTests: omnitest(correctExpr='vuelos %>% head(10) %>% left_join(airports, by = c("origin"="faa"))')
  Hint: Escribe lo que se te pidió


- Class: text
  Output: Como podrás apreciar en la tabla que se desplego tienes la tabla original de vuelos a la que se le añadio la respectica información del aeropuerto con respecto al lugar de origen de cada uno.

- Class: text
  Output: Utilizamos head(10) para que sólo haga esto para las primeras 10 observaciones de la tabla vuelos y sea más fácil visualizar el resultado.

- Class: text
  Output: El left join funciona de la siguiente manera 

- Class: text
  Output: Supongamos que ya tienes las llaves de las dos tablas con las que vas a hacer el join, la información de la segunda tabla se va a añadir a la primera tabla con base en las llaves como se explicó anteriormente.

- Class: text
  Output: Pero en el caso del left join todos los renglones de la primera tabla se van a respetar y aparecerán en la tabla resultante, sin embargo de la segunda tabla sólo se traerán los valores coincidentes y en caso de no existir se colocará un NA

- Class: figure
  Output: Para que entiendas mejor la relación te presentaremos una diagrama de venn con los datos que contendría la tabla resultante del join.
  Figure: venn.R
  FigureType: new

- Class: figure
  Output: Análogamente te presentamos el funcionamiento del right join con otro diagrama de venn
  Figure: vennr.R
  FigureType: new

- Class: text
  Output: Ahora pasaremos a los inner joins

- Class: text
  Output: Estos son los más fáciles de comprender

- Class: text
  Output: Lo que hace un inner join es generar una nueva tabla con las filas que tienen llaves coincidentes entre tablas.

- Class: text
  Output: Veremos un ejemplo muy sencillo para entender lo que hace

- Class: text
  Output: En este ejercicio generaremos dos data frames que se relacionen por una llave pero que sus llaves sólo tengan ciertos valores en común.




- Class: text
  Output: Vamos a hacerlo paso a paso

- Class: cmd_question
  Output: Crea una data frame corriendo el siguiente código df <- data.frame(llave = c("1", "2", "3") ,dos = c("a", "b", "c")).
  CorrectAnswer: df <- data.frame(llave = c("1", "2", "3") ,dos = c("a", "b", "c"))
  AnswerTests: omnitest(correctExpr='df <- data.frame(llave = c("1", "2", "3") ,dos = c("a", "b", "c"))')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Crea otro data frame corriendo este código df1 <- data.frame(llave1 = c("1", "2", "4"), dos1 = c("e", "f", "g"))
  CorrectAnswer: df1 <- data.frame(llave1 = c("1", "2", "4"), dos1 = c("e", "f", "g"))
  AnswerTests: omnitest(correctExpr='df1 <- data.frame(llave1 = c("1", "2", "4"), dos1 = c("e", "f", "g"))')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Imprime los dos data frames con print(list(df, df1))
  CorrectAnswer: print(list(df, df1))
  AnswerTests: omnitest(correctExpr='print(list(df, df1))')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Como puedes ver en la columna llave y llave1 se comparten sólo algunos valores.

- Class: cmd_question
  Output: Ahora vas a aplicar un inner join con el siguiente código df %>% inner_join(df1, by = c("llave" = "llave1")).
  CorrectAnswer: df %>% inner_join(df1, by = c("llave" = "llave1"))
  AnswerTests: omnitest(correctExpr='df %>% inner_join(df1, by = c("llave" = "llave1"))')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Sí ves el output de lo que acabas de compilar, la tabla que se generó sólo contiene los renglones de las llaves que estaban contenidas en ambas tablas.

- Class: text
  Output: Ahora veremos el outer join

- Class: text
  Output: Funciona de una forma similar a todos los joins, pero lo que hace este join es que en la neuva tabla mantiene todas las observaciones que aparecen en ambas tablas, si no existe relación de algún renglón con la otra tabla se rellena con NAs.

- Class: cmd_question
  Output: Ahora te toca a ti,  has un outer join con la misma estructura que el inner join pero utilizando la función full_join.
  CorrectAnswer: df %>% full_join(df1, by = c("llave" = "llave1"))
  AnswerTests: omnitest(correctExpr='df %>% full_join(df1, by = c("llave" = "llave1"))')
  Hint: Es el mismo código, sólo utiliza la función full_join  en lugar de inner_join.

- Class: text
  Output: Si te fijas, trajo todas las observaciones y las que no tienen una relación con la otra tabla rellenan ese espacio con NAs.

- Class: text
  Output: En realidad el left join y el right join que vimos anteriormente son tipos de outer joins es sólo que en el caso del left join, mantiene todas las observaciones de la primera tabla y las que cuadren de la segunda a su vez en el caso del right join, mantiene todas las observaciones de la segunda tabla y las que cuadren de la primera.

- Class: text
  Output: Ahora una imagen que ilustra lo que viste del outer join.

- Class: figure
  Output: Cada círculo representa una tabla, el número de la intersección nos dice cuantos valores comparten y los otros cuantos difieren.
  Figure: venno.R
  FigureType: new

- Class: text
  Output: Ahora que terminamos de ver el funcionamiento y tipo de joins veremos una de las grandes dificultades de trabajar con ellos.

- Class: text
  Output: Las llaves duplicadas.

- Class: text
  Output: Hasta ahora casi todos los ejemplos que hemos visto tuvieron llaves únicas pero veremos otros valores que pueden conectar las tablas.

- Class: text
  Output: Hasta ahora casi todos los ejemplos que hemos visto tenían llaves únicas pero ese no siempre es el caso, veremos que pasa cuando hay valores repetidos en las llaves.
  
  

- Class: text
  Output: Veremos las dos posibilidades de output con unos sencillos ejercicios

- Class: cmd_question
  Output: Creamos una data frame escribiendo el código df1 <- data.frame(llave1 = c("1", "2", "2","1"), dos1 = c("e", "f", "g","h"))
  CorrectAnswer: df1 <- data.frame(llave1 = c("1", "2", "2","1"), dos1 = c("e", "f", "g","h"))
  AnswerTests: omnitest(correctExpr='df1 <- data.frame(llave1 = c("1", "2", "2","1"), dos1 = c("e", "f", "g","h"))')
  Hint: Escribe lo que se te pidió

- Class: text
  Output: Como podrás notarlo en la columna de llave1 el valor dos está  repetido.

- Class: cmd_question
  Output: Genera un segundo data frame con el siguiente código df <- data.frame(llave = c("1", "2") ,dos = c("a", "b"))
  CorrectAnswer: df <- data.frame(llave = c("1", "2") ,dos = c("a", "b"))
  AnswerTests: omnitest(correctExpr='df <- data.frame(llave = c("1", "2") ,dos = c("a", "b"))')
  Hint: Utiliza comillas dobles.

- Class: text
  Output: Lo has notado?

- Class: text
  Output: Son las mismas llaves que en df1 pero sin repetición además de que las dimensiones de df1 y df son distintas.

- Class: cmd_question
  Output: Aplica un left join tomando a df1 como la primera tabla.
  CorrectAnswer: df1 %>% left_join(df, by = c("llave1" = "llave"))
  AnswerTests: omnitest(correctExpr='df1 %>% left_join(df, by = c("llave1" = "llave"))')
  Hint: df1 %>% left_join(df, by = c("llave1" = "llave"))

- Class: text
  Output: Viendo el output notarás que los valores de df se repiten para rellenar los espacios de la nueva tabla,  esto pasa por que comparten llaves.

- Class: text
  Output: De esta manera puedes agregar información a una tabla rapidamente, digamos que tienes en una columna los nombres de los aeropuertos pero con muchas repeticiones y en una tabla aparte tiene las abreviaturas de cada nombre de manera única, al hacer el join rellenaras la columna con la abreviatura correspondiente.

- Class: text
  Output: Veamos el segundo caso que es cuando hay repeticiones en las llaves de ambas tablas. 

- Class: cmd_question
  Output: Generamos el primer data frame con el siguiente código df4 <- data.frame(llave1 = c("1", "2", "2","1"), dos1 = c("e", "f", "g","h"))
  CorrectAnswer: df4 <- data.frame(llave1 = c("1", "2", "2","1"), dos1 = c("e", "f", "g","h"))
  AnswerTests: omnitest(correctExpr='df4 <- data.frame(llave1 = c("1", "2", "2","1"), dos1 = c("e", "f", "g","h"))')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Generamos el segundo data frame con el siguiente código df3 <- data.frame(llave = c("1", "2","2") ,dos = c("a", "b","c"))
  CorrectAnswer: df3 <- data.frame(llave = c("1", "2","2") ,dos = c("a", "b","c"))
  AnswerTests: omnitest(correctExpr='df3 <- data.frame(llave = c("1", "2","2") ,dos = c("a", "b","c"))')
  Hint: Escribe lo que se te pidió.


- Class: cmd_question
  Output: Aplica un left join tomando df4 como la primera tabla.
  CorrectAnswer: df4 %>% left_join(df3, by = c("llave1" = "llave"))
  AnswerTests: omnitest(correctExpr='df4 %>% left_join(df3, by = c("llave1" = "llave"))')
  Hint: df4 %>% left_join(df3, by = c("llave1" = "llave"))

- Class: text
  Output: Lo que hace la fución para solucionar el problema de llaves repetidas es que le asigina un nuevo renglón en la tabla resultante por cada repetición, de esta manera no se pierde información.

- Class: text
  Output: Por ultimo veremos Filtering joins, hay dos tipos

- Class: text
  Output: semi_join que mantiene todas las observaciones de la primera tabla que coincidan con las de la segunda.
  

- Class: text
  Output: anti_join este tipo de join hace justo lo contrario, elimina todas las observaciones en la primera tabla que tengan coincidencia con las de la segunda.

- Class: text
  Output: Crearemos dos data frames que nos servirán para ver como funcionan ambos joins.

- Class: cmd_question
  Output: Creamos data frame df5 <- data.frame(llave1 = c("1", "2", "3","4"), dos1 = c("e", "f", "g","h"))
  CorrectAnswer: df5 <- data.frame(llave1 = c("1", "2", "3","4"), dos1 = c("e", "f", "g","h"))
  AnswerTests: omnitest(correctExpr='df5 <- data.frame(llave1 = c("1", "2", "3","4"), dos1 = c("e", "f", "g","h"))')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Creamos data frame df6 <- data.frame(llave = c("1", "2") ,dos = c("a", "b"))
  CorrectAnswer: df6 <- data.frame(llave = c("1", "2") ,dos = c("a", "b"))
  AnswerTests: omnitest(correctExpr='df6 <- data.frame(llave = c("1", "2") ,dos = c("a", "b"))')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Aplica un semi join corriendo el siguiente código df5 %>% semi_join(df6, by = c("llave1" = "llave"))
  CorrectAnswer: df5 %>% semi_join(df6, by = c("llave1" = "llave"))
  AnswerTests: omnitest(correctExpr='df5 %>% semi_join(df6, by = c("llave1" = "llave"))')
  Hint: df5 %>% semi_join(df6, by = c("llave1" = "llave"))

- Class: text
  Output: Observa como se mantuvieron sólo las llaves coincidentes entre ambas tablas.
  
  

- Class: cmd_question
  Output: Aplica un anti join sobre los data frames anteriores con este código df5 %>% anti_join(df6, by = c("llave1" = "llave"))
  CorrectAnswer: df5 %>% anti_join(df6, by = c("llave1" = "llave"))
  AnswerTests: omnitest(correctExpr='df5 %>% anti_join(df6, by = c("llave1" = "llave"))')
  Hint: df5 %>% anti_join(df6, by = c("llave1" = "llave"))

- Class: text
  Output: Justo a la inversa, sólo se mantuvieron las observaciones que no eran coincidentes con la segunda tabla.

- Class: text
  Output: Ya para terminar veremos 3 operadores.

- Class: text
  Output: intersect(tab1, tab2) que nos regresará las observaciones que esten en ambas tablas.

- Class: text
  Output: union(tab1, tab2) regresa una nueva tabla con las observaciones de ambas tablas sin repeticiones.

- Class: text
  Output: setdiff(tab1, tab2) regresa observaciones que esten en tab1 pero no en tab2.

- Class: text
  Output: Felicidades hemos terminado la lección!
