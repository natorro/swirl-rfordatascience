- Class: meta
  Course: swirl-rfordatascience
  Lesson: 17_iteration_with_purrr
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Ahora pasaremos a trabajar con la sentencia for, esta sentencia es un bucle, el cual nos permite repetir una sentencia en un periodo definido, en R tenemos diferentes funcionalidades para las cuales aplicamos un for.

- Class: text
  Output: Por ejemplo si necesitamos checar la meia de diferentes valores dentro de un data frame podemos usar la funció median() para cada valor, pero esto esta mal empleado, la forma más efectiva y eficaz es aplicar un bucle.

- Class: text
  Output: Por ésta misma razón, hablaremos de cuatro variaciones básicas para implementar un bucle, la primera es para modificar un objeto de R que ya existe, el segundo para nombres o vaores, en vez de indices, también lo podemos utilizar para un analisis de salidas cuando no sabemos su longitud, así mismo la manipulación de secuencias.


- Class: cmd_question
  Output: Primero cargaremos la librería tidyverse 
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr='library(tidyverse)')
  Hint: Type a hint.


- Class: cmd_question
  Output: Ahora construiremos una tabla con tibble que es la siguiente df <- tibble(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))
  CorrectAnswer: df <- tibble(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))
  AnswerTests: omnitest(correctExpr='df <- tibble(a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))')
  Hint: Revisa la sintaxis para generar el tibble.

- Class: text
  Output: Lo que haremos es modificar el data frame con el valor de 3 en todas las columnas



- Class: cmd_question
  Output: La sintaxis es de la siguiente manera for(i in seq_along(df)){df[i] <- 3}
  CorrectAnswer: for(i in seq_along(df)){df[i] <- 3}
  AnswerTests: omnitest(correctExpr='for(i in seq_along(df)){df[i] <- 3}')
  Hint: Revisa la sintaxis del for 

- Class: text
  Output: Si nosotros creamos una salida con nombres, tenemos que asegurarnos de nombrar el vector de resultado.

- Class: cmd_question
  Output: Asi de la siguiente manera queda la funsión r <- vector("lista_salida", length(x))
  CorrectAnswer: r <- vector("lista_salida", length(x))
  AnswerTests: omnitest(correctExpr='EXPR', correctVal=VAL)
  Hint: verifica si la sintaxis es correcta 

- Class: text
  Output: Para hacer un recorrido de los nombres de las columnas de un data frame y ver cuantos son, utilizaremos un bucle para saber el ancho del data frame, esto nos ayudará, para cuando trabajemos con un data frame muy grande.

- Class: cmd_question
  Output: Ahora bien para poder realizar este recorrido de nombres, lo primero que tendremos que hacer es cargar un data frame que tiene R el cual es iris, para cargarlo escribe data("iris")
  CorrectAnswer: data("iris")
  AnswerTests: omnitest(correctExpr='data("iris")')
  Hint: vamos tú puedes.

- Class: cmd_question
  Output: Una vez cargado el data frame de iris, pasareos a realizar la función for( i in seq_along(iris)){nombre[[i]] <- iris [i]}
  CorrectAnswer: for( i in seq_along(iris)){nombre[[i]] <- iris [i]}
  AnswerTests: omnitest(correctExpr='for( i in seq_along(iris)){nombre[[i]] <- iris [i]}')
  Hint: vamos tú puedes.

- Class: cmd_question
  Output: Ahora veremos los levels del data frame para eso en otro for aplicamos la sentencia for(i in seq_along(iris)){valor <- ris[[i]]}
  CorrectAnswer: for(i in seq_along(iris)){valor <- ris[[i]]}
  AnswerTests: omnitest(correctExpr='for(i in seq_along(iris)){valor <- ris[[i]]}')
  Hint: vamos tú puedes.

- Class: text
  Output: Si en dado caso de que nosotros no tengamos conocimiento de las salidas de ciertos datos utilizaremos la función while, esta iteración no para hasta que se cumple una condición. Para ejemplificar esto calcularemos el valor de pi

- Class: cmd_question
  Output: Para esto ocuparemos el data frame iris y veremos su longitud la sentencia sería while(i <= length(iris)){i <- i + 1}
  CorrectAnswer: while(i <= length(iris)){i <- i + 1}
  AnswerTests: omnitest(correctExpr='while(i <= length(iris)){i <- i + 1}')
  Hint: Revisa la sintaxis.

- Class: text
  Output: Si por alguna razón quisieras saber la media de una columna específica del data frame podemos hacer este calculo de dos maneras, la primero por un for y la segunda mediante funciones

- Class: cmd_question
  Output: Para representa la primera mediante el for, primero crearemos el mismo df que trabajamos con los numeros aleatorios, df <- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))
  CorrectAnswer: df <- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))
  AnswerTests: omnitest(correctExpr='df <- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10))')
  Hint: No es dificil, vamos tú puedes.

- Class: cmd_question
  Output: Ahora definimos una variable de salida a la cual le pasaremos un vector del tamaño del df  salida <- vector("double", length(df))
  CorrectAnswer: salida <- vector("double", length(df))
  AnswerTests: omnitest(correctExpr='salida <- vector("double", length(df))')
  Hint: No es dificil, vamos tú puedes.

- Class: cmd_question
  Output: Ahora calcularemos la media con todos los valores  for(i in seq_along(df)){salida[[i]] <- mean(df[[i]])}
  CorrectAnswer: for(i in seq_along(df)){salida[[i]] <- mean(df[[i]])}
  AnswerTests: omnitest(correctExpr='for(i in seq_along(df)){salida[[i]] <- mean(df[[i]])}')
  Hint: No es dificil, vamos tú puedes.

- Class: cmd_question
  Output: Para visualizarlo escribe  salida
  CorrectAnswer: salida
  AnswerTests: omnitest(correctExpr='salida')
  Hint: No es dificil, vamos tú puedes.

- Class: text
  Output: Primero, la programaciń funcional, de forma simple es cuando una función admite otra como argumento, por ejemplo la función sapply

- Class: cmd_question
  Output: Escribe cuadrado <- function(x) if(x < 5) x**2 lse -x**2 
  CorrectAnswer: cuadrado <- function(x) if(x < 5) x**2 lse -x**2
  AnswerTests: omnitest(correctExpr='cuadrado <- function(x) if(x < 5) x**2 lse -x**2')
  Hint: Revisa la sintaxis 

- Class: cmd_question
  Output: Comprobamos  sapply(1:10, cuadrado)
  CorrectAnswer: sapply(1:10, cuadrado)
  AnswerTests: omnitest(correctExpr='sapply(1:10, cuadrado)')
  Hint: Revisa la sintaxis 

- Class: text
  Output: La programación funcional la podemos aplicar en grupos homoéneos de valores.

- Class: text
  Output: También podemos contar con las funciones de mapeo, tales como map(), map_lgl(), map_int(), map_dbl(), map_chr()

- Class: text
  Output: la función map() se utiiza para mapear listas, map_lgl() mapea vectores de tipo lógico, map_int() mapea un vector de tipo entero, map_dbl() mapea un vector de tipo ouble y map_chr  mapea un vector de tipo caracter.

- Class: cmd_question
  Output: Para calcular  la media de los datos con la función map hacemos lo siguiente  map_dbl(df, mean)
  CorrectAnswer:  map_dbl(df, mean)
  AnswerTests: omnitest(correctExpr=' map_dbl(df, mean)')
  Hint: Revisa si es correcta la sintaxis 


- Class: cmd_question
  Output: Otra representación equivalente es df %>% map_dbl(mean)
  CorrectAnswer: df %>% map_dbl(mean)
  AnswerTests: omnitest(correctExpr='df %>% map_dbl(mean)')
  Hint: Revisa si es correcta la sintaxis 


- Class: text
  Output: Al momento de hacer una función podemos colocar atajos dentro de las mismas declaraciones de las funciones, esto con el proposito de crear un código más limpio.

- Class: text
  Output: PAra comenzar, ocuparemos el dataset mtcars, y lo que haremos es enlistar los modelos de los automoviles de acuerdo a su tipo de cilindrage, por lo tanto cada una de estas listars por cilindarge, conendrá más listas en las cuales se dará el modelo, el tipo de la variable y su valor.

- Class: cmd_question
  Output: Lo primero que harás es escribir la siguiente funsión modelos <- mtcars %>% split(.$cyl) %>% map(function(df) lm(mpg ~ wt, data = df))
  CorrectAnswer: modelos <- mtcars %>% split(.$cyl) %>% map(function(df) lm(mpg ~ wt, data = df))
  AnswerTests: omnitest(correctExpr='modelos <- mtcars %>% split(.$cyl) %>% map(function(df) lm(mpg ~ wt, data = df))')
  Hint:  Vamos tú puedes 

- Class: text
  Output: Ahora podemos construir la misma función, pero aplicando los atajos que nos permiten compactar el código y que se vea más presentable.

- Class: cmd_question
  Output: La función equivalente a la anterior pero con los atajos es la siguinete modelos <- mtcars %>% split(.$cyl) %>% map(~lm(mpg ~ wt, data = .))
  CorrectAnswer: modelos <- mtcars %>% split(.$cyl) %>% map(~lm(mpg ~ wt, data = .))
  AnswerTests: omnitest(correctExpr='modelos <- mtcars %>% split(.$cyl) %>% map(~lm(mpg ~ wt, data = .))')
  Hint: Intentalo de nuevo, no se te olvide ejecutar la función 

- Class: text
  Output: Como puedes observar es exactamente lo mismo, solo que ahora la función es más corta. 

- Class: text
  Output: Para tratar con los datos en los cuales tenemos errores, ya sea al momento de que estamos trabajandocon los data frame o antes de tratarlos para ver los posibles errores que nos puedan arrojar. 

- Class: cmd_question
  Output: Para ilustrar lo anterior considerece que tenemos la siguiente lista prueba.1 <- safely(long)
  CorrectAnswer: prueba.1 <- safely(long)
  AnswerTests: omnitest(correctExpr='prueba.1 <- safely(long)')
  Hint: Es bastante simple.

- Class: cmd_question
  Output: Ahora consultaremos el contenido de la ista con str  y lo pondremos como paramero el valor safe_long(10)
  CorrectAnswer: str(safe_long(10))
  AnswerTests: omnitest(correctExpr='str(safe_long(10))')
  Hint:  El resultado correcto es str(safe_long(10))

- Class: text
  Output: la función safely() Lo que devuleve es un listado de los resultados y errores de los componentes.

- Class: text
  Output: Entonces practicamente al momento de pasarle la función los valores en los cuales se revisa su estado, si este es exitoso el resultado, los errores son nulos, y si no, pondrá el NA de resultados y los errores que se deben atender.

- Class: cmd_question
  Output: Ahora veremos un ejemplo en el cual se ponen en NULL los resultados y se enlistan los errores escribe str(safe_long("a"))
  CorrectAnswer: str(safe_long("a"))
  AnswerTests: omnitest(correctExpr='str(safe_long("a"))')
  Hint: Revisa la sintaxis.

- Class: cmd_question
  Output: También podemos usar la función de mapeo para visualizar los errores posibles en el contenido de un vctor, por lo tanto escribe un vector que contenga "chucho", 10 y 20 y que esten guardados en la variable x
  CorrectAnswer: x <- c("chucho", 10 , 20)
  AnswerTests: omnitest(correctExpr='x <- c("chucho", 10 , 20)')
  Hint: El vector pedido es x <- c("chucho", 10 , 20)

- Class: cmd_question
  Output: Ahora bien, escribe la siguiente linea de código x.2 <- x %>% map(safely(log))
  CorrectAnswer: x.2 <- x %>% map(safely(log))
  AnswerTests: omnitest(correctExpr='x.2 <- x %>% map(safely(log))')
  Hint: El vector pedido es x.2 <- x %>% map(safely(log))

- Class: cmd_question
  Output: Finalmente usa la función str para viualizar el mapeo de errores 
  CorrectAnswer: str(x.2)
  AnswerTests: omnitest(correctExpr='str(x.2)')
  Hint: El vector pedido es str(x.2)

- Class: text
  Output: Si nosotros queremos tener solo una lista de errores, contamos con la función de transpose(), esta función conjunta en una sola variable todos los resultados y en otra todos los errores encontrados.



- Class: cmd_question
  Output: Con el mismo vetor creado anteriormente, lo que harmos es crear solo una variable de resultados y otra de errores. Entonces a la variable y modificala con la funció transpose().
  CorrectAnswer: y %>% transpose()
  AnswerTests: omnitest(correctExpr='y %>% transpose()')
  Hint: La modificación es y <- transpose()

- Class: cmd_question
  Output: Ahora para checar la lista que en realidad se modifico aplicamos la función str() que anteriormente trabajamos.
  CorrectAnswer: str(y)
  AnswerTests: omnitest(correctExpr='str(y)')
  Hint: La modificación es str(y)

- Class: text
  Output: En algun momento, lo que nos importará es capturar los mensajes de salida, las salidas como tal, y los mensajes de warning

- Class: cmd_question
  Output: Por lo tanto crea una lista de tipo numerica list(2,6,9), y guardala en la variable x.prueba
  CorrectAnswer: x.prueba <- list(2, 6, 9)
  AnswerTests: omnitest(correctExpr='x.prueba <- list(2, 6, 9)')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Recopilaremos la información de las salidas,a continuación modifica la variable x.prueba, para mapear las salidas, para esto utiliza la función map() y dentro la función quietly(log)
  CorrectAnswer: x.prueba %>% map(quietly(log))
  AnswerTests: omnitest(correctExpr='x.prueba %>% map(quietly(log))')
  Hint: Escribe lo que se te pide.

- Class: cmd_question
  Output: Por ultimo verifica la información que se recopilo anteriormente con la función que hemos venido trabajando para consultar las listas
  CorrectAnswer: str(x.prueba) 
  AnswerTests: omnitest(correctExpr='str(x.prueba) ')
  Hint: Escribe lo que se te pide.

- Class: text
  Output: Hay ocaciones en las cuales necesitemos mapear varias variables/columnas dentro de un data frame, por lo tanto podemos hacerlo de dos maneras una por medio de funciones y la otra por medio de las funciones map2() y pmap().

- Class: cmd_question
  Output: Este ejemplo es para que te relaciones con la normalización de un vector, por lo tanto del data frame iris, guarda la primera columna dentro de iris.norm
  CorrectAnswer: iris.norm <- iris[1]
  AnswerTests: omnitest(correctExpr='iris.norm <- iris[1]')
  Hint: Vamos tú puedes 

- Class: cmd_question
  Output: Ahora con la funcion map modificaras el vector iris.new, y pasando como parametro rnorm 
  CorrectAnswer: iris.norm  %>% map(rnorm)
  AnswerTests: omnitest(correctExpr='iris.norm  %>% map(rnorm)')
  Hint: Vamos tú puedes 

- Class: cmd_question
  Output: Ahora crea una lista con valores del 1:5 y guardalos en la variable x.random
  CorrectAnswer: x.random <- list(1, 2, 3, 4, 5)
  AnswerTests: omnitest(correctExpr='x.random <- list(1, 2, 3, 4, 5)')
  Hint: Escribe lo que se te pide

- Class: cmd_question
  Output: Ahora variaremos la desviacion estandar con los dos vectores creados anteriormente, por lo tanto escribe seq_along(iris.intcome) %>% map(~rnorm(10, iris.intcome[[.]], x.random[[.]])) %>% str()
  CorrectAnswer: seq_along(iris.intcome) %>% map(~rnorm(10, iris.intcome[[.]], x.random[[.]])) %>% str()
  AnswerTests: omnitest(correctExpr='seq_along(iris.intcome) %>% map(~rnorm(10, iris.intcome[[.]], x.random[[.]])) %>% str()')
  Hint: Revisa la sintaxis. 

- Class: text
  Output: Una forma elegante o equivalente de la función anterior es la función map2, ésta función nos permite iterar dos vectores al mismo tiempo, por lo tanto quedaria de la siguiente manera.

- Class: cmd_question
  Output: Escribe map2(iris.intcome, x.random, n = 10) %>% str()
  CorrectAnswer: map2(iris.intcome, x.random, n = 10) %>% str()
  AnswerTests: omnitest(correctExpr='map2(iris.intcome, x.random, n = 10) %>% str()')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Crea en una tercera lista  que contenga los valores 3,5,9 y guardalos en la variable z
  CorrectAnswer: z <- list(3, 5, 9) 
  AnswerTests: omnitest(correctExpr='z <- list(3, 5, 9) ')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Ahora en una lista pondremos las tres lista creadas anteriormente iris.intcome, x.random y z, almacenalas en norm.multi
  CorrectAnswer: norm.multi <- list(iris.intcome, x.random, z) 
  AnswerTests: omnitest(correctExpr='norm.multi <- list(iris.intcome, x.random, z) ')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Ahora normalizaremos las tres listas con la unción pmap() y rnorm, modificando la misma lista norm.multi 
  CorrectAnswer: norm.multi %>% pmap(rnorm)
  AnswerTests: omnitest(correctExpr='norm.multi %>% pmap(rnorm)')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Por utilmo checamos los cambios en norm.multi 
  CorrectAnswer: str(norm.multi)
  AnswerTests: omnitest(correctExpr='str(norm.multi)')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Si en una ocación tenemos que mapear un tribble, podemos hacerlo, para esto lo primero que escribiras será norm.tribble <- tribble(~m, ~s, ~x,6,2, 1,7,5, 3,8,9, 5)
  CorrectAnswer: norm.tribble <- tribble(~m, ~s, ~x,6,2, 1,7,5, 3,8,9, 5)
  AnswerTests: omnitest(correctExpr='norm.tribble <- tribble(~m, ~s, ~x,6,2, 1,7,5, 3,8,9, 5)')
  Hint: Revisa la sintaxis 

- Class: cmd_question
  Output: Ahora modifica norm.tribble con la función pmap
  CorrectAnswer: norm.tribble %>% pmap(rnorm)
  AnswerTests: omnitest(correctExpr='norm.tribble %>% pmap(rnorm)')
  Hint: Escribe lo que se te pidió 

- Class: text
  Output: En dado caso de que no quisieramos variar los parametros de una función en especifico, sino de varias funciones, supongamos que quieres variar los parametros de las siguientes listas parametro.1, parametro.2 y parametro.3, Ahora la pregunta sería cómo iteramos estas tres listas.

- Class: text
  Output: En purr, lo lleva a acabo la función invoke_map(), en el primer argumento es una lista de funciones, el segundo argumento especifica los argumentos de las funciones y el tercer argumento es la llamada a cada función cierto número de veces

- Class: cmd_question
  Output: En el siguiente ejemplo crea la siguiente lista  dtcn <- list("geom", "normal", "gamma")
  CorrectAnswer:  dtcn <- list("geom", "normal", "gamma")
  AnswerTests: omnitest(correctExpr=' dtcn <- list("geom", "normal", "gamma")')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Ahora pasaremos a hacer cada una de las funciones con sus parametros corespondientes, en la función geom <- list(), dale como parametro mean = 10
  CorrectAnswer: geom <- list(mean = 10)
  AnswerTests: omnitest(correctExpr='geom <- list(mean = 10)')
  Hint: Escribe lo que se te pide

- Class: cmd_question
  Output: En la función normal <- list(), agregale un mínimo de 0 y un máximo de 6
  CorrectAnswer: normal <- list(min = 0, max = 6)
  AnswerTests: omnitest(correctExpr='normal <- list(min = 0, max = 6)')
  Hint: Escribe lo que se te pide

- Class: cmd_question
  Output: En la función  gamma <- list(), agrega un rate con valor de 5 
  CorrectAnswer: gamma <- list(rate = 5)
  AnswerTests: omnitest(correctExpr='gamma <- list(rate = 5)')
  Hint: Escribe lo que se te pide

- Class: cmd_question
  Output: Pasaremos a juntar estas listas en una lista y guardaremos en la variable parametros 
  CorrectAnswer: parametros <- list(geom, normal, gamma)
  AnswerTests: omnitest(correctExpr='parametros <- list(geom, normal, gamma)')
  Hint: Escribe lo que se te pide

- Class: cmd_question
  Output: Por ultimo utilizando invoke_map(), parametros y haciendo que se iteren n = 6
  CorrectAnswer: invoke_map(dtcn, parametros, n= 6)
  AnswerTests: omnitest(correctExpr='invoke_map(dtcn, parametros, n= 6)')
  Hint: Escribe lo que se te pide

- Class: text
  Output: Cuando se decea saber que sucede dentro de una función y no nos interesa el valor de retorno, utilizamos la función walk(), esta función lo que hace es checar paso a paso lo que hace la función y retorna los valores que estan intermedios de dicha función.

- Class: cmd_question
  Output: Por ejemplo, si quisieras ver lo que hay dentro de parametros, escribe  parametros %>% walk(print) 
  CorrectAnswer: parametros %>% walk(print)
  AnswerTests: omnitest(correctExpr='parametros %>% walk(print)')
  Hint: Revisa la sintaxis.

- Class: text
  Output: Encontraremos alguna veces funciones predicativas, estas funciones lo unico que retornan es TRUE o FALSE.

- Class: cmd_question
  Output: Por ejemplo, carga el dataset iris
  CorrectAnswer: data("iris")
  AnswerTests: omnitest(correctExpr='data("iris")')
  Hint: Esto se vió anteriormente 

- Class: text
  Output: Ahora verificaremos que tipos de variables hay dentro de el dataset iris, para esto haremos uso de las funciones keep() y discard(), estas funciones mantienen o guardan los elementos de las entradas cuando el predicado es TRUE o FALSE

- Class: cmd_question
  Output: Por lo tanto manten las entradas de iris %>% keep() cuando sean caracter (is.character) he imprime el resultado con str()
  CorrectAnswer: iris %>% keep(is.character) %>% str()
  AnswerTests: omnitest(correctExpr='iris %>% keep(is.character) %>% str()')
  Hint: Una pista es  keep(is.character)

- Class: text
  Output: Como puedes observar no arrojo ninguna variable, por lo tanto no mantuvo ningun contenido que tuviera la caracteristica de caracter.

- Class: cmd_question
  Output: En cambio si en ves de usar is.character, quisieramos verificar si es is.atomic, reemplaza is.character por is.atomic
  CorrectAnswer: iris %>% keep(is.atomic) %>% str()
  AnswerTests: omnitest(correctExpr='iris %>% keep(is.atomic) %>% str()')
  Hint: Escribe lo que se te pidió

- Class: cmd_question
  Output: Ahora haremos lo mismo pero con discard() pero ahora reemplaza keep por discard y para como parametro is.factor
  CorrectAnswer: iris %>% discard(is.factor) %>% str()
  AnswerTests: omnitest(correctExpr='iris %>% discard(is.factor) %>% str()')
  Hint: Escribe lo que se te pidió

- Class: text
  Output: Tambien contamos con las funciones some() y every(), estas funciones verifican si el predicado de la función se aplica para todas o solo para algunas y lo que retorna es un TRUE o FALSE.

- Class: cmd_question
  Output: Por ejemplo  varios.type <- list(1:7, "hola", list(2))
  CorrectAnswer: varios.type <- list(1:7, "hola", list(2))
  AnswerTests: omnitest(correctExpr='varios.type <- list(1:7, "hola", list(2))')
  Hint: Revisa sintaxis

- Class: cmd_question
  Output: Ahora aplica la función some(is_integer)
  CorrectAnswer: varios.type %>% some(is_integer)
  AnswerTests: omnitest(correctExpr='varios.type %>% some(is_integer)')
  Hint: Revisa sintaxis

- Class: cmd_question
  Output: Ahora reemplasa is_integer por is_function
  CorrectAnswer: varios.type %>% some(is_function)
  AnswerTests: omnitest(correctExpr='varios.type %>% some(is_function)')
  Hint: Escribe lo que se te pide

- Class: cmd_question
  Output: Ahora en vez de some() utiliza every() y utiliza is_vector
  CorrectAnswer: varios.type %>% every(is_vector)
  AnswerTests: omnitest(correctExpr='varios.type %>% every(is_vector)')
  Hint: Escribe lo que se te pide

- Class: text
  Output: Hay veces en las cuales tenemos en una lista diferentes vectores que tienen datos en comun y quisieramos trabajar solo con esos datos en los cuales aparecen en los tres vectores.

- Class: text
  Output: En purr, hay una función reduce() que nos ayuda a reducri la información que se encuentre en una lista o vector.

- Class: cmd_question
  Output: Por ejemplo, Tenemos en una lista los resultados de lanzar tres veces tres dados, los cuales son los siguientes resul.d <- list(c(1:3),c(2,5,1),c(6,2,3))
  CorrectAnswer: resul.d <- list(c(1:3),c(2,5,1),c(6,2,3))
  AnswerTests: omnitest(correctExpr='resul.d <- list(c(1:3),c(2,5,1),c(6,2,3))')
  Hint: Escribe la lista mostrada.

- Class: cmd_question
  Output: Si quisieramos saber, en que resultados los tres dados fueron el mismo digito, utilizamos la función reduce(intersect). Aplica esta función a la variable resul.d
  CorrectAnswer: resul.d %>% reduce(intersect)
  AnswerTests: omnitest(correctExpr='resul.d %>% reduce(intersect)')
  Hint: Escribe lo que se te pide.
