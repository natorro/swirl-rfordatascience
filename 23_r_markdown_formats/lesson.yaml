- Class: meta
  Course: swirl-rfordatascience
  Lesson: 23_r_markdown_formats
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Hasta ahora todo lo que has visto de R Markdown estuvo enfocado en producir documentos html.

- Class: text
  Output: Este capítulo te dará una visión general de los muchos tipos de elementos de salida que puedes generar con R Markdown.

- Class: text
  Output: Existen dos formas de establecer el formato de salida.

- Class: text
  Output: La primera es modificando de manera permanente el encabezado YAML.

- Class: text
  Output: Por ejemplo

- Class: text
  Output: title: "Demo"


- Class: text
  Output: output: html_document


- Class: text
  Output: La segunda es transitoriamente


- Class: text
  Output: Para hacerlo así se llama la función rmarkdown::render() y se aplica de la siguiente manera

- Class: text
  Output: rmarkdown::render( "pokemon.Rmd", output_format = "word_document")

- Class: text
  Output: El botón de punto de RStudio renderiza un archivo al primer formato listado en su campo de salida. Puede renderizar a formatos adicionales haciendo clic en el menu desplegable junto al botón de tejer.

- Class: text
  Output: Opciones de Salida

- Class: text
  Output: Cada formato de salida está asociado con una función R. Es importante saber el nombre de la función que hace la salida porque ahí es donde se obtiene ayuda. 

- Class: text
  Output: Por ejemplo, para averiguar qué parámetros puedes configurar con html_document, puedes buscar  ?rmarkdown:html_document().

- Class: text
  Output: También puedes reescribir los parámetros que están dados por default.

- Class: text
  Output: Un ejemplo sería

- Class: text
  Output: output: html_document: toc: true toc_float: true

- Class: text
  Output: Documentos

- Class: text
  Output: Como lo mencionamos anteriormente R Markdown puede generar muchos tipos de dcoumentos, aquí te los enlistamos.

- Class: text
  Output: 1 pdf_document hace un pdf con LaTeX, nota: debes instalar el diseño de documento de código abierto.

- Class: text
  Output: 2 word_document genera undocumento de Microsoft Word (.docx)

- Class: text
  Output: odt_document genera un documento de OpenDocuments (.odt)

- Class: text
  Output: rtf_document para Rich Text Format (.rtf)

- Class: text
  Output: md_document para un documento Markdown. 

- Class: text
  Output: Recuerda que cuando generes documentos puedes apagar la pantalla por defecto de codigo entrando a global options y correr

- Class: text
  Output: knitr::opts_chunk$set(echo = FALSE)

- Class: text
  Output: Cuadernos

- Class: text
  Output: Un html_notebook es una variación de un html_document.

- Class: text
  Output: Un documento html se centra en la comunicación con los tomadores de decisiones, mientras que un cuaderno se centra en colaborar con otros científicos de datos. Estos diferentes propósitos llevan al uso del HTML.Ambas salidas HTML contendrán la salida renderizada, pero el portátil también contiene la fuente completa de código.

- Class: text
  Output: A diferencia de un html_document, esta representación siempre incluye una copia incrustada del código fuente que la generó.

- Class: text
  Output: También puede ser editado en RStudio. Cuando abres un archivo .nb.html, RStudio vuelve a crear automáticamente el archivo .Rmd que generó eso. Otra cosa que puedes hacer es incluir archivos de soporte (por ejemplo, .csv archivos de datos), que se extraerán automáticamente cuando sea necesario.

- Class: text
  Output: Así puedes compartir análisis que hayas hecho con colegas de una forma fácil, clara y rápida.

- Class: text
  Output: Presentaciones

- Class: text
  Output: También puedes utilizar R Markdown para hacer presentaciones.

- Class: text
  Output: Aun que pierdes un poco de la personalización que tendrías al usar otras herramientas como PowerPoint tienes la ventaja de que te puedes ahorrar mucho tiempo al usar tu código de R directamente para hacer la presentación.

- Class: text
  Output: Las presentaciones funcionan dividiendo el contenido en diapositivas, con una nueva diapositiva que comienza en cada primera (#) o segundo encabezado de nivel (##). También puede insertar una regla horizontal (***) para crear una nueva diapositiva sin un encabezado.

- Class: text
  Output: Existen distintos formatos para las presentaciones

- Class: text
  Output: ioslides_presentation - presentación HTML con ioslides


- Class: text
  Output: slidy_presentation - presentación HTML con W3C Slidy

- Class: text
  Output: beamer_presentation - presentación PDF con LaTeX Beamer

- Class: text
  Output: Tableros

- Class: text
  Output: Los tableros son útiles para comunicar grandes cantidades de información de manera visual y rápida.

- Class: text
  Output: flexdashboard es una herramienta que vuelve muy sencillo generar dashboards con R Markdown.

- Class: text
  Output: Ahora veamos como los encabezados afectan el diseño:

- Class: text
  Output: Encabezado nivel 1 (#) comienza una nueva página en el panel de control.

- Class: text
  Output: Encabezado nivel 2 (#) comienza una nueva columna.

- Class: text
  Output: Encabezado nivel 3 (#) comienza una nueva línea.

- Class: text
  Output: Componentes Interactivos

- Class: text
  Output: Cualquier archivo con formato HTML puede contener componentes interactivos.

- Class: text
  Output: Es decir documentos cuadernos, presentaciones o tableros.

- Class: text
  Output: htmlwidgets

- Class: text
  Output: Son funciones de R que producen visualizaciones interactivas de HTML.

- Class: text
  Output: Una gran ventaja de los htmlwidgets es que no necesitas saber nada de HTML o JavaScript para utilizarlos. 

- Class: text
  Output: Existen muchas paqueterias que contienen htmlwidgets como son:

- Class: text
  Output: dygraphs para visualizaciones interactivas de series de tiempo

- Class: text
  Output: DT para tablas interactivas.

- Class: text
  Output: rthreejs para gráficas interactivas en 3D

- Class: text
  Output: DiagrammeR para diagramas.

- Class: text
  Output: Una lugar donde puedes aprender más de htmlwidgets y de las diversas paqueterías es la página http://www.htmlwidgets.org/.

- Class: text
  Output: Shiny

- Class: text
  Output: Los htmlwidgets proporcionan interactividad del lado del cliente aunque esta interactividad sucede en el navegador.

- Class: text
  Output: Por un lado está bien porque el archivo de html puede ser distribuido sin conexión alguna sin embargo esto limita lo que se puede hacer pues todo es implementado con HTML y JavaScript.

- Class: text
  Output: Aquí es donde entra la paquetería de Shiny que te permite crear contenido interactivo con código de R y sin usar JavaScript.

- Class: text
  Output: Para poder llamar a Shiny desde un documento de R Markdown debes añadir lo siguiente en el encabezado(runtime)

- Class: text
  Output: title: "Shiny Web App"

- Class: text
  Output: output: html_document

- Class: text
  Output: runtime: shiny

- Class: text
  Output: Seguido de esto puedes añadir funciones de "input" para agregar contenido interactivo.

- Class: text
  Output: Por ejemplo:

- Class: text
  Output: numericInput("age", "How old are you?", NA, min = 0, max = 150)

- Class: text
  Output: SHiny tiene mucho potencial e incluso puedes crear aplicaciones interactivas sin usar JavaScript.

- Class: text
  Output: si quieres aprender más de Shiny podrás hacerlo en http://shiny.rstudio.com/

- Class: text
  Output: Páginas web

- Class: text
  Output: Con un poco de infraestructura puedes usar R Markdown para generar una página web completa

- Class: text
  Output: Algunos consejos básicos para que puedas hacerlo son:

- Class: text
  Output: Coloque sus archivos .Rmd en un solo directorio, index.Rmd se convertirá la página de inicio

- Class: text
  Output: Agregue un archivo YAML nombre_site.yml que proporcione la navegación para el sitio

- Class: text
  Output: Ejecute rmarkdown::render_site() para compilar _site, un directorio de archivos listos para implementarse como un sitio web estático independiente, o si utiliza un Proyecto RStudio para su directorio web. RStudio agregará una pestaña al IDE que puede usar para crear y previsualizar su sitio.

- Class: text
  Output: De igual manera si quieres aprender más podrás hacerlo en http://bit.ly/RMarkdownWebsites.

- Class: text
  Output: Felicidades! hemos terminado.
