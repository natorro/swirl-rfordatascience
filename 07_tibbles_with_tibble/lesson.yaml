- Class: meta
  Course: swirl-rfordatascience
  Lesson: 07_tibbles_with_tibble
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Los Tibbles son data frames, pero con agunos comportamientos distintos para facilitar el análisis de datos. La inovación que se desarrolla para R se implementa por medio de paquetes, a que el codigo base de R es viejo y dificil de cambiar. 

- Class: cmd_question
  Output: Para iniciar la lección se debe de tener en cuenta que trabajaremos con la libreria tidyverse, a estas alturas debes ser capaz de ejecutarla. Por favor, carga la libreria.
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr='library(tidyverse)')
  Hint: library(algo)

- Class: text
  Output: Los tibbles son cualidades centrales de tidyverse, y puedes convertir un data frame o marco de datos en un tibble, usando la función as_tibble()

- Class: cmd_question
  Output: Convierte el data frame iris a un tibble.
  CorrectAnswer: as_tibble(iris)
  AnswerTests: omnitest(correctExpr='as_tibble(iris)')
  Hint: Usa la función que describimos anteriormente y dentro añade el dataframe que queremos convertir

- Class: text
  Output: Puedes crear un nuevo tibble con vectores individuales con la función tibble(), la cual recicla automáticamente inputs de longitud 1, y permite referir variables creadas por el usuario.

- Class: cmd_question
  Output: Ejecuta el siguiente código(:) tibble(x = 1:5, y = 1, z = x ^ 2 + y)
  CorrectAnswer: tibble(x = 1:5, y = 1, z = x ^ 2 + y)
  AnswerTests: omnitest(correctExpr='tibble(x = 1:5, y = 1, z = x ^ 2 + y)')
  Hint: Solo copia tibble(x = 1:5, y = 1, z = x ^ 2 + y)

- Class: text
  Output: Cabe destacar que a diferencia de data.frame(), tibble() nunca cambia en tipo de las entradas, ni los nombres de las variables, ni crea nuevos nombres para las columnas.

- Class: text
  Output: Es posible que un tibble tenga nombres no sintactico, o que no acepta R, como aquellos que no inician con una letra, o que contienen espacios, los cuales debes de rodear con `

- Class: cmd_question
  Output: Un buen ejemplo de estos nombres es el siguiente código que debes ejecutar(:) tb <- tibble(`:)` = "smile", ` ` = "space", `2000` = "number")
  CorrectAnswer: tb <- tibble(`:)` = "smile", ` ` = "space", `2000` = "number")
  AnswerTests: omnitest(correctExpr='tb <- tibble(`:)` = "smile", ` ` = "space", `2000` = "number")')
  Hint: Copia el código tb <- tibble(`:)` = "smile", ` ` = "space", `2000` = "number")

- Class: cmd_question
  Output: Ahora vamos a consultar cómo se visualiza ese tibble, llama el objeto por favor.
  CorrectAnswer: tb
  AnswerTests: omnitest(correctExpr='tb')
  Hint: Solo llamalo con su nombre, tb

- Class: cmd_question
  Output: Ejecuta el siguiente código de ejemplo para entender como funciona(:) tribble(~x, ~y, ~z, #--/--/---- "a", 2, 3.6, "b", 1, 8.5)
  CorrectAnswer: tribble(~x, ~y, ~z, #--/--/---- "a", 2, 3.6, "b", 1, 8.5)
  AnswerTests: omnitest(correctExpr='tribble(~x, ~y, ~z, #--/--/---- "a", 2, 3.6, "b", 1, 8.5)')
  Hint: Copia el código y ejecutalo.

- Class: text
  Output: Otra variante de un data frame es el tribble, abreviado de transposed tibble, lo cual quiere decir que es una funcion modificada para permitir entrada de datos en forma de código; los encabezados de columnas son definidos por fórmulas, y los registros son separados por comas; lo cual hace posible ingresar trozos pequeños de datos directamente.

- Class: cmd_question
  Output: Para entender como ingresar datos por medio de un tribble, ejecuta el siguiente código(:) tribble(~x, ~y, ~z, #--/--/---- "a", 2, 3.6, "b", 1, 8.5)
  CorrectAnswer: tribble(~x, ~y, ~z, #--/--/---- "a", 2, 3.6, "b", 1, 8.5)
  AnswerTests: omnitest(correctExpr='tribble(~x, ~y, ~z, #--/--/---- "a", 2, 3.6, "b", 1, 8.5)')
  Hint: Copia el código y ejecutalo

- Class: text
  Output: Existen dos diferencias principales entre los Tibbles y un data.frame clásico(:) el como imprimen los datos y el extraer datos.

- Class: text
  Output: Los tibbles solo muestran las 10 primeras filas, y todas las columnas que quepan dentro de la pantalla, lo cual hace que sea más facil trabajar con grandes volumenes de datos, ademas de mostrar el tipo de dato con el que se esta trabajando.

- Class: text
  Output: Los tibbles fueron diseñados para que no llenes tu pantalla de datos al imprimir un conjunto de datos, sin embargo, puede que en ocasiones necesites usar la función print() para mostrar más filas que las permitidas por default.

- Class: cmd_question
  Output: Puedes controlar el número de filas y la longitud de la impresión, como este codigo que debes ejecutar(:) nycflights13::flights %>% print(n = 10, width = Inf)
  CorrectAnswer: nycflights13::flights %>% print(n = 10, width = Inf)
  AnswerTests: omnitest(correctExpr='nycflights13::flights %>% print(n = 10, width = Inf)')
  Hint: Ingresa el código de impresión de datos.

- Class: text
  Output: Ahora bien, para extraer data de un tibble de una sola variable puedes usar $ y [[, donde [[ extraen por nombre o posición, y $ solo extrae por nombre pero sin menos elementos a recordar.
