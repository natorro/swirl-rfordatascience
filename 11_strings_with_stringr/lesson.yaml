- Class: meta
  Course: swirl-rfordatascience
  Lesson: 11_strings_with_stringr
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Strings con "stringr"

- Class: text
  Output: Durante este capítulo te introduciremos al manejo de strings con R.


- Class: text
  Output: Veremos lo básico de los strings y como crearlos pero nos enfocaremos en las expresiones regulares.


- Class: text
  Output: Estas expresiones son útiles porque por lo general los strings son datos no estructurados o semi estructurados y las expresiones regulares sirven para describir sus patrones.

- Class: text
  Output: Para este capítulo deberas tener instaladas las librerías "tidyverse" y "stringr".

- Class: text
  Output: Conceptos básicos 

- Class: text
  Output: Un string se puede crear ya sea  con comillas simples '' o con comillas dobles "" no hay diferencia en el comportamiento. Te recomendamos que utilices comillas dobles salvo el caso en que quieras incluir comillas dentro del string entonces utilizarás comillas simples afuera y dobles adentro.

- Class: cmd_question
  Output: Genera un string introduciendo el siguiente código string <- "hola"
  CorrectAnswer: string <- "hola"
  AnswerTests: omnitest(correctExpr='string <- "hola"')
  Hint: Escribe lo que se te indico.


- Class: text
  Output: Un ejemplo de comillas dentro de un string sería el siguiente string2 <-'Esto es "Esparta"'

- Class: text
  Output: Sí algunas ves olvidas poner las comillas finales en un string te va mandar error en la consola y se quedará corriendo hasta que lo detengas, esto puedes hacerlo presionando la tecla de esc.

- Class: text
  Output: Si quieres incluir literalmente alguna comilla o algún símbolo puedes utilizar una diagonal invertida "\" para que se ignore el símbolo.

- Class: text
  Output: Al utlilizar la diagonal invertida "\" muchos caracteres adqueiren otra función por ejemplo la \n indica un cambio de línea, \t indica una tabulación otro ejemplo importante es "/u00b5" que sirve para escribir caracteres que nos pertenecen al inglés que funcionan en cualquier plataforma.

- Class: cmd_question
  Output: Se pueden guardar strings dentro de un vector, genera uno escribiendo el siguiente código c("a", "bb", "c").
  CorrectAnswer: c("a", "bb", "c")
  AnswerTests: omnitest(correctExpr='c("a", "bb", "c")')
  Hint: Escribe c("a", "bb", "c").

- Class: text
  Output: Longitud de los strings.

- Class: text
  Output: R contiene muchas funciones para trabajar con strings por default, sin embargo suelen se inconsistentes y por lo tanto difíciles de recordar. Nosotros utilizaremos las funciones de stringr que suelen ser más intuitivas y siempre comiezan con un "str_".

- Class: text
  Output: Una de las funciones más comunes es str_length que te devuelve el número de caracteres que tiene un string. 

- Class: cmd_question
  Output: Para que veas su funcionamiento corre el código str_length(c("a", "bb", "b b", NA))
  CorrectAnswer: str_length(c("a", "bb", "b b", NA))
  AnswerTests: omnitest(correctExpr='str_length(c("a", "bb", "b b", NA))')
  Hint: Escribe str_length(c("a", "bb", "b b", NA))

- Class: text
  Output: Combinar Strings.

- Class: text
  Output: Para hacer esto se utiliza la función str_c()

- Class: text
  Output: Por ejemplo str_c("a", "b") regresaría como output "ab"

- Class: text
  Output: Un caso un poco más avanzado sería str_c("a", "b" , sep = "-") regresaría como output "a-b"

- Class: text
  Output: Es posible combinar multiples caracteres.

- Class: cmd_question
  Output: Corre el siguiente código para que veas un ejemplo str_c("Good ", c("morning", "night")).
  CorrectAnswer: str_c("Good ", c("morning", "night"))
  AnswerTests: omnitest(correctExpr='str_c("Good ", c("morning", "night"))')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Como en todas las funciones de R, una ves que comprendes como funciona puedes empezar a hacer combinaciones y experimentar.

- Class: text
  Output: Por ejemplo 

- Class: cmd_question
  Output: Define esta variable nombre_alumno <- "Pepe".
  CorrectAnswer: nombre_alumno <- "Pepe" 
  AnswerTests: omnitest(correctExpr='nombre_alumno <- "Pepe"')
  Hint: Usa este código.

- Class: cmd_question
  Output: Ahora define la variable aprobado <- FALSE
  CorrectAnswer: aprobado <- FALSE
  AnswerTests: omnitest(correctExpr='aprobado <- FALSE')
  Hint: Utiliza el código que se te indicó.

- Class: text
  Output: Tienes definida una variable de tipo character y otro de tipo booleano, lo que vamos a hace en el siguiente ejemplo será combinar la función str_c() con un condicional "if()".

- Class: cmd_question
  Output: Escribe el siguiente código str_c( "Felicidades ", nombre_alumno, " ", if (aprobado) " Aprobaste", if(!aprobado) "podrás cursar de nuevo la materia",".")

  CorrectAnswer: str_c( "Felicidades ", nombre_alumno, " ", if (aprobado) " Aprobaste", if(!aprobado) "podrás cursar de nuevo la materia", ".")
  AnswerTests: omnitest(correctExpr='str_c( "Felicidades ", nombre_alumno, " ", if (aprobado) " Aprobaste", if(!aprobado) "podrás cursar de nuevo la materia", ".")')
  Hint: Utiliza el código que se te proporciono.

- Class: text
  Output: Como viste al tener aprobado como false se cumplio la condición de if(!aprobado).

- Class: text
  Output: En el caso de que aprobado fuera TRUE, se escribiría lo que indica la otra condición.

- Class: text
  Output: Ahora veremos subconjuntos de strings.

- Class: text
  Output: Para obtener un substring utilizaremos la función str_sub().

- Class: text
  Output: Los argumentos que esta recibe son

- Class: text
  Output: un string o conjunto de strings

- Class: text
  Output: start <- el lugar del string donde inicia el subconjunto

- Class: text
  Output: end <- el lugar del string donde termina el subconjunto

- Class: text
  Output: Hagamos un ejercicio sencillo de esto

- Class: cmd_question
  Output: define el siguiente vector color <- c("rojo", "azul", "amarillo")
  CorrectAnswer: color <- c("rojo", "azul", "amarillo")
  AnswerTests: omnitest(correctExpr='color <- c("rojo", "azul", "amarillo")')
  Hint: Utiliza lo que se te dió.

- Class: cmd_question
  Output: Utiliza la función str_sub() para  extraer la primera letra de cada color.
  CorrectAnswer: str_sub(color, start = 1, end = 1)
  AnswerTests: omnitest(correctExpr='str_sub(color, start = 1, end = 1)')
  Hint: Utiliza este código str_sub(color, start = 1, end = 1).

- Class: text
  Output: Existen otras funciones que pueden ser muy útiles como son str_to_lower que sirve para hacer las letras minúsculas o str_to_upper para hacerlas mayúsculas, str_sort para ordenar y str_to_title que hace mayúscula a la primer letra de la palabra.

- Class: cmd_question
  Output: En este ejercicio vas a hacer mayúscula la primer letra de cada color. Deberas utlizar la función str_sub dentro de str_to_upper pero ojo, esto sólo te arrojará los valores que pides, tienes que definir a estás letras como las nuevas letras inciales.
  CorrectAnswer: str_sub(color, 1, 1) <- str_to_upper(str_sub(color, 1, 1))
  AnswerTests: omnitest(correctExpr='str_sub(color, 1, 1) <- str_to_upper(str_sub(color, 1, 1))')
  Hint: Esta es la respuesta correcta str_sub(color, 1, 1) <- str_to_upper(str_sub(color, 1, 1))

- Class: cmd_question
  Output: Escribe color para que veas como quedó el vector.
  CorrectAnswer: color
  AnswerTests: omnitest(correctExpr='color')
  Hint: Escribe color.

- Class: text
  Output: Al aplicar funciones como str_to_upper, str_to_lower, str_to_title o str_sort es importante considerar el idioma con el que estamos trabajando ya que cada lenguaje tiene sus propias reglas.

- Class: text
  Output: Afortunadamente a cada una de estas funciones se le puede agregar un argumento llamado locale = '', lo que hace este argumento como ya lo has de suponer es definir el idioma, cada idioma tiene su propio código por ejemplo en el caso del inglés es "en".

- Class: text
  Output: Si no sabes cuál es el tuyo simplemente buscalo en internet.

- Class: mult_question
  Output: Una ultima practica para pasar a lo siguiente. Supon que quieres extraer la letra central de un conjunto de palabras, que funciones usarías en el caso de las palabras que tienen un número par de letras si te dicen que te tomes las dos letras centrales dadas las siguientes opciones.
  AnswerChoices: str_to_title y str_sub;if y str_subset;if y str_sub;str_to_title
  CorrectAnswer: if y str_sub
  AnswerTests: omnitest(correctVal='if y str_sub')
  Hint: Revisa que hace cada función.

- Class: text
  Output: Buscando patrones con expresiones regulares

- Class: text
  Output: Las expresiones regulares son una herramienta que nos ayuda a encontrar patrones dentro de los strings.

- Class: text
  Output: Las primeras expresiones que utilizaremos son str_view y str_view_all.

- Class: text
  Output: Las anteriores reciben como argumentos

- Class: text
  Output: un string o conjunto de strings

- Class: text
  Output: el patrón que se desea encontrar

- Class: text
  Output: Veamos un ejemplo práctico.

- Class: cmd_question
  Output: Aplica la función str_view con el siguiente código str_view(color, "a")
  CorrectAnswer: str_view(color, "a")
  AnswerTests: omnitest(correctExpr='str_view(color, "a")')
  Hint: Escribe el código que se te proporciono.

- Class: text
  Output: Existen caracteres especiales que se usan para busquedas un poco más avanzadas por ejemplo cuando quieres que R busque cualquier caracter se utiliza un "." es decir digamos que quieres todas las palabras que tengan una a entre la segunda y la penúltima letra debes usar ".a."

- Class: text
  Output: Te preguntarás que pasa cuando quieres buscar uno de estos caracteres de manera particular, es curioso por que también existe un caracter especial para estos casos. 

- Class: text
  Output:  Este símbolo es "\\" , dando un ejemplo justo de lo anterior para buscar el punto se escribiría "\\."

- Class: text
  Output: Surge una duda natural, entonces como busco \ es lógico pensar que bastaría con tres diagonales pero como la "\" tiene la misma función que "\\" pero para las expresiones regulares de los strings, se deben utilizar cuatro diagonales para poder buscar una "\\\\"

- Class: text
  Output: Ahora veremos enrutamientos, mejor conocidos como "Anchors".

- Class: text
  Output: Normalmente cuando utilizas una expresión regular hace una busqueda de cualquier carácter que concuerde.

- Class: text
  Output: Los anchors resultan muy útiles porque puedes hacer que la condición concuerde con el inicio o el final de los strings a los que les estás aplicando la busqueda.

- Class: text
  Output: Para que concuerde con el inicio de los strings se utiliza el símbolo "^".

- Class: text
  Output: Para que concuerde con el final de los strings se utiliza el símbolo "$".

- Class: text
  Output: Hagamos una practica para que puedas aplicar lo que acabas de aprender.

- Class: cmd_question
  Output: Manda llamar el vector color para que recuerdes su estructura.
  CorrectAnswer: color
  AnswerTests: omnitest(correctExpr='color')
  Hint: Escribe "color" para mandarlo llamar. 

- Class: cmd_question
  Output: Ahora que los viste aplica la función str_view y busca los colores que comienzan con la letra "A".
  CorrectAnswer: str_view(color, "^A")
  AnswerTests: omnitest(correctExpr='str_view(color, "^A")')
  Hint: Recuerda poner la letra tal y como viene en el string. EL código correcto es str_view(color, "^A")

- Class: cmd_question
  Output: Ahora aplica la misma función pero busca los colores que terminen con "o".
  CorrectAnswer: str_view(color, "o$")
  AnswerTests: omnitest(correctExpr='str_view(color, "o$")')
  Hint: Debes utilizar el símbolo $

- Class: text
  Output: Pero que pasa cuando se trata de un lista muy larga, en algunos casos es más eficiente que sólo te muestre los strings que cumplem con el patrón deseado, para eso se agrega un argumento a str_view() llamado match, el mismo lo definirás como "match = TRUE".

- Class: text
  Output: Ya has visto caracteres especiales que sirven para identificar más de un caracter, ahora veremos a otros cuatro de ellos que pueden resultar muy útiles.




- Class: text
  Output: \d que sirve para buscar cualquier dígito.

- Class: text
  Output: \s que sirve para buscar espacios en blanco.





- Class: text
  Output: el siguiente son corchetes de tipo []

- Class: text
  Output: Que si se introducen caracteres separados por comas, r buscará todos los strings que contengan alguno de los mismos.

- Class: text
  Output: Si quiere excluir esos caracteres de una busqueda general simplemente añade este símbolo "^" antes del primer carácter

- Class: text
  Output: Es importane recordar que para poder usar cualquier expresión que tenga una diagonal invertida la incio "\" se debe añadir otra diagonal para evitar que se genere un error.


- Class: text
  Output: Es posible utilizar expresiones lógicas como "o" mejor conocido como "OR" que se denota por "|".


- Class: cmd_question
  Output: Digamos que tienes el vector c("tomo", "tome", "temía", "temerá") y quieres que encuentre las primeras dos de la lista. Utilizá un "or". 
  CorrectAnswer: str_view(c("tomo", "tome", "temía", "temerá"), "tom(o|e)")
  AnswerTests: omnitest(correctExpr='str_view(c("tomo", "tome", "temía", "temerá"), "tom(o|e)")')
  Hint: El código correcto es str_view(c("tomo", "tome", "temía", "temerá"), "tom(o|e)").

- Class: text
  Output: Repeticiones.

- Class: text
  Output: y con repeticiones queremos decir controlar que número de coincidencias que se deben buscar.

- Class: text
  Output: Existen varios caracters que se pueden utilizar para esto.


- Class: text
  Output: Un signo de interrogación (final) sirve para buscar cero o una.

- Class: text
  Output: Un signo de más para buscar uno a más coincidencias.

- Class: text
  Output: Un signo de multiplicación para buscar cero o más. 


- Class: cmd_question
  Output: Tienes el vector color y quieres el patrón A seguido de algún caracter
  CorrectAnswer: str_view(color, "A*")
  AnswerTests: omnitest(correctExpr='str_view(color, "A*")')
  Hint: Utiliza A*.

- Class: text
  Output: Para que quede más claro haremos un ejercicio más con repeticiones.

- Class: mult_question
  Output: Supón que tienes el vector x <- "aaaaaa" y corres el código str_view(x, "a*"). Cuál será el resultado.
  AnswerChoices: Todas las a son seleccionadas;Ninguna letra es seleccionada, el patŕon no coincide;Se selecciona sólo la primera letra
  CorrectAnswer: Todas las a son seleccionadas
  AnswerTests: omnitest(correctVal='Todas las a son seleccionadas')
  Hint: Recuerda que hace cada símbolo.

- Class: text
  Output: Muy bien, al poner el signo "*" le indicamos a R que busque repeticiones del patŕon en cada string. Por eso es que señala todas las letras.

- Class: text
  Output: Aun que también puedes determinar el número de repeticiones que quieres que R busque en cada string.

- Class: text
  Output: /{n}/ Se usa para indicar que quieres que lo busque n veces.(Ignora las diagonales)

- Class: text
  Output: /{n,}/ le indica a R que debe de buscar mínimo n repeticiones por string. (Ignora las diagonales)

- Class: text
  Output: /{,n}/ le indica a R que debe de buscar máximo n repeticiones por string. (Ignora las diagonales)

- Class: text
  Output: /{n,m}/ le indica a R que debe de buscar entre n y m repeticiones por string. (Ignora las diagonales)

- Class: cmd_question
  Output: Genera el vector x, escribe x <- "aaaaaa" 
  CorrectAnswer: x <- "aaaaaa" 
  AnswerTests: omnitest(correctExpr='x <- "aaaaaa" ')
  Hint: Escribe x <- "aaaaaa" 


- Class: text
  Output: Hagamos un ejercicio con el vector x .

- Class: cmd_question
  Output: Utiliza la función str_view() y lo que acabas de ver para que sólo busque tres patrones por string. En este caso el patrón sigue siendo "a"
  CorrectAnswer: str_view(x, "a{3}")
  AnswerTests: omnitest(correctExpr='str_view(x, "a{3}")')
  Hint: La respuesta correcta es str_view(x, "a{3}")

- Class: text
  Output: Como pudiste ver sólo señalo tres letras de x.

- Class: text
  Output: Ahora que sabes lo básico de las expresiones regulares es hora de que comencemos a ver ejemplos más practicos.

- Class: text
  Output: Para este veremos la detección de patrones con str_detect()

- Class: text
  Output: Recordemos el vector color.

- Class: cmd_question
  Output: Escribe color para que puedas visualizarlo
  CorrectAnswer: color
  AnswerTests: omnitest(correctExpr='color')
  Hint: Escribe color.

- Class: text
  Output: La función str_detect() devuelve un vector lógico, es decir un vector que tiene TRUE en caso de contener el patrón y FALSE en el caso negativo.

- Class: text
  Output: Hagamos algo simple.

- Class: cmd_question
  Output: Aplica la función str_detect() al vector color utilizando como patrón la letra "a".
  CorrectAnswer: str_detect(color, "a")
  AnswerTests: omnitest(correctExpr='str_detect(color, "a")')
  Hint: La función se aplica de la misma manera que str_view()

- Class: text
  Output: Como viste el único valor que arroja un TRUE en el vector lógico es "Amarillo" que cumple en tener el patrón exacto.

- Class: text
  Output: Como ya te lo hemos mencionada anteriormente siempre puedes jugar con las combinaciones y generar resultados interesantes.

- Class: text
  Output: Por ejemplo si le aplicas la función sum a está función, te regresará la cantidad de string que cumplen con el patrón que buscas. 

- Class: cmd_question
  Output: Otro buen ejemplo es aplicar mean sobre la función para detectar patrones. Corre el siguiente código mean(str_detect(color, "A")).
  CorrectAnswer: mean(str_detect(color, "A"))
  AnswerTests: omnitest(correctExpr='mean(str_detect(color, "A"))')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Este número te indica la proporción de valores del vector que cumplen con la condición contra los que no.

- Class: text
  Output: Este fue un ejemplo de una combinación sencilla, sin embargo puedes lograr cosas muchos más complejas.
  

- Class: text
  Output: Otro ejemplo.

- Class: mult_question
  Output: Que valores serán marcados como true si se aplica el siguiente código a un vector cualquiera !str_detect( vector, "[^aeiou]")
  AnswerChoices: Los que comienzen con vocal;Los que no comienzen con vocal;error
  CorrectAnswer: Los que no comienzen con vocal
  AnswerTests: omnitest(correctVal='Los que no comienzen con vocal')
  Hint: Recuerda que significa el signo de admiración antes de una condición.





- Class: text
  Output: Extracción de Texto.

- Class: text
  Output: Con esto nos referimos a la extracción de caracteres coincidentes con los patrones que busques.

- Class: text
  Output: Esto se hace con la función str_exact().
  
  

- Class: text
  Output: Vamos a utilizar "Harvard sentences" que son parte de la libraría de stringr y nos serán muy útiles para practicar expresiones regulares.

- Class: text
  Output: Harvard sentences consta de 720 oraciones con las que haremos distintas busquedas.

- Class: cmd_question
  Output: Para que veas el tipo de oraciones que contiene escribe head(sentences).
  CorrectAnswer: head(sentences)
  AnswerTests: omnitest(correctExpr='head(sentences)')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Veamos un ejemplo en el que utilizaremos varias de las funciones que ya vimos en este capítulo en conjunto con str_extract. 

- Class: text
  Output: Lo que vamos a hacer es extraer las oraciones que comienzen con algún pronombre, seguido de esto vamos a extraer los pronombres y meterlos en un data frame. Esto puede servir para analizar el tipo de texto que tenemos así como su estructura.

- Class: cmd_question
  Output: Lo primero que haremos será definir un vector con los pronombres que vamos a buscar, escribe el código pro <- c("You","He","She","It","We","They")
  CorrectAnswer: pro <- c("You","He","She","It","We","They")
  AnswerTests: omnitest(correctExpr='pro <- c("You","He","She","It","We","They")')
  Hint: Escribe le vector que se te pidió, asegurate de utilizar comillas dobles para cada string.

- Class: text
  Output: Pero el vector como tal no nos sirve para hacer la busqueda por que las oraciones que buscamos contienen sólo uno de los pronombres de nuestor vector.

- Class: cmd_question
  Output: Debemos de convertirlo en una expresión regular pero como haremos eso, escribe el código xpr <- str_c(pro, collapse = "|")
  CorrectAnswer: xpr <- str_c(pro, collapse = "|")
  AnswerTests: omnitest(correctExpr='xpr <- str_c(pro, collapse = "|")')
  Hint: Escribe lo que se te pidió.

- Class: cmd_question
  Output: Escribe xpr para que visualices la expresión que acabas de crear
  CorrectAnswer: xpr
  AnswerTests: omnitest(correctExpr='xpr')
  Hint: Escribe xpr.

- Class: text
  Output: Como podrás apreciar se concateno en un string separando las palabras por "|" que para R esto indica un "o" para la busqueda.

- Class: text
  Output: Ahora del conjunto de oraciones hacemos un subconjunto de las que cumplen con el patrón.

- Class: cmd_question
  Output: Escribe el código s_coincidence <- str_subset(sentences, xpr)
  CorrectAnswer: s_coincidence <- str_subset(sentences, xpr)
  AnswerTests: omnitest(correctExpr='s_coincidence <- str_subset(sentences, xpr)')
  Hint: Escribe s_coincidence <- str_subset(sentences, xpr).

- Class: text
  Output: s_coincidence contiene todas las oraciones de sentences que cumplen con el patrón que pedimos.

- Class: text
  Output: Ahora extraemos el patrón con el que cumplió cada oración, que en la practica nos serviría para simplificar su análisis.

- Class: cmd_question
  Output: Escribimos el código final <- str_extract_all(s_coincidence, xpr, simplify = TRUE)
  CorrectAnswer: final <- str_extract_all(s_coincidence, xpr, simplify = TRUE)
  AnswerTests: omnitest(correctExpr='final <- str_extract_all(s_coincidence, xpr, simplify = TRUE)')
  Hint: Escribe lo que se te indicó.

- Class: text
  Output: Se utilizó el argumento de simplify para que de output nos genere una matriz.

- Class: cmd_question
  Output: CConvierte final a data frame y renombralo como finaldt.
  CorrectAnswer: finaldt <- as.data.frame(final)
  AnswerTests: omnitest(correctExpr='finaldt <- as.data.frame(final)')
  Hint: Escribe finaldt <- as.data.frame(final).

- Class: cmd_question
  Output: Escribe finaldt para que veas el resultado de lo que acabas de hacer.
  CorrectAnswer: finaldt
  AnswerTests: omnitest(correctExpr='finaldt')
  Hint: Escribe finaldt

- Class: text
  Output: En final dt tenemos el resultado final con el que ya podríamos trabajar.



- Class: text
  Output: Agrupación de texto

- Class: text
  Output: Es decir agrupación del texto que tenga patrones coincidentes con la busqueda.

- Class: text
  Output: Para agrupar estos resultados utilizaremos parenthesis, estos nos ayudarán a extraer las partes de patrones complejos.

- Class: text
  Output: Veamos un ejemplo, utilizaremos pipes pertenecientes a dplyr para facilitar el entendimiento del código, y funciones de stringr.

- Class: cmd_question
  Output: Vamos a extraer he, she y am con la palabra que le siga en cada oración. Escriba be <- "(is|are|am) ([^ ]+)"
  CorrectAnswer: be <- "(is|are|am) ([^ ]+)"
  AnswerTests: omnitest(correctExpr='be <- "(is|are|am) ([^ ]+)"')
  Hint: Escriba lo que se le pidió respetando los espacios.

- Class: text
  Output: Ahora que está generado el patrón de busqueda. Vamos al ejercicio.

- Class: cmd_question
  Output: Ahora filtra sentences utilizando str_subset, recuerda que ya tienes tu patŕon de busqueda y que debes utilizar pipes. Nombra a está busqueda como "sentence_be".
  CorrectAnswer: sentence_be <- sentences %>% str_subset(be)
  AnswerTests: omnitest(correctExpr='sentence_be <- sentences %>% str_subset(be)')
  Hint: El código correcto es sentence_be <- sentences %>% str_subset(be)

- Class: cmd_question
  Output: Utiliza sentence_be %>% head(5) para que veas las primeras 5 oraciones que filtraste y que efectivamente contienen lo que buscas.
  CorrectAnswer: sentence_be %>% head(5)
  AnswerTests: omnitest(correctExpr='sentence_be %>% head(5)')
  Hint: Escribe sentence_be %>% head(5).

- Class: cmd_question
  Output: Aplica str_extract() a sentence_be con el patrón de busqueda que ya tienes.
  CorrectAnswer: sentence_be %>% str_extract(be)
  AnswerTests: omnitest(correctExpr='sentence_be %>% str_extract(be)')
  Hint: La respuesta es sentence_be %>% str_extract(be).

- Class: text
  Output: Como pudiste ver te trae todo los patrones coincidentes, pero entonces dónde quedo el agrupamiento. Vamos a ello.

- Class: text
  Output: Te introducimos la función str_match, con ella podrás extraer los patrones coincidentes pero los tendrás concatenados y separados.



- Class: cmd_question
  Output: Repite le ejercicio anterior pero con str_match().
  CorrectAnswer: sentence_be %>% match(be)
  AnswerTests: omnitest(correctExpr='sentence_be %>% str_match(be)')
  Hint: Utiliza el código sentence_be %>% match(be)
  
- Class: text
  Output: Mucho mejor, generamos una tabla mucho más completa.
  
- Class: text
  Output: Existe una manera más sencilla de hacer todo esto, podrás experimentar con ella despues si así lo deseas. Se usa la función tidyr::extract que funciona muy similar a str_match sólo que en esta se definen los nombres de los grupos de cada patrón. Por ejemplo tidyr::extract(sentence, c("be", "word"), "(is|are|am) ([^ ]+)", remove = FALSE)




- Class: text
  Output: Veremos dos funciones que son nativas de r pero que también utilizan expresiones regulares.

- Class: text
  Output: La primera es la función apropos() que busca entre todo los objetos disponibles en el entorno global.

- Class: text
  Output: La segunda función es dir(), lo que hace es buscar en todos los archivos de directorio.

- Class: text
  Output: Esta función toma como argumento una expresión regular y regresa los nombres de los archivos que coincidan con la busqueda.

- Class: text
  Output: Por ejemplo digamos que quieres todos los archivos html, el código para hacerlo sería -> head(dir(pattern = "\\.html$"))

- Class: text
  Output: Por último la librería de stringr está basada en stringi y es muy útil cuando estás aprendiendo ya que sólo utiliza las funciones más comunes pero es importante destacar que mientras stringr tiene tan solo 42 funciones stringi tiene 234 por lo que sí en algún momento tienes problemas para realizar algo no estaría mal que dieras una revisada entre las funciones de stringi.

- Class: text
  Output: Felicidades has terminado la lección.
