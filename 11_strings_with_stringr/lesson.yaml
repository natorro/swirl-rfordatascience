- Class: meta
  Course: swirl-rfordatascience
  Lesson: 11_strings_with_stringr
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Strings con "stringr"

- Class: text
  Output: Durante este capítulo te introduciremos al manejo de strings con R.


- Class: text
  Output: Veremos lo básico de los strings y como crearlos pero nos enfocaremos en las expresiones regulares.


- Class: text
  Output: Estas expresiones son útiles porque por lo general los strings son datos no estructurados o semi estructurados y las expresiones regulares sirven para describir sus patrones.

- Class: text
  Output: Para este capítulo deberas tener instaladas las librerías "tidyverse" y "stringr".

- Class: text
  Output: Conceptos básicos 

- Class: text
  Output: Un string se puede crear ya sea  con comillas simples '' o con comillas dobles "" no hay diferencia en el comportamiento. Te recomendamos que utilices comillas dobles salvo el caso en que quieras incluir comillas dentro del string entonces utilizarás comillas simples afuera y dobles adentro.

- Class: cmd_question
  Output: Genera un string introduciendo el siguiente código string <- "hola"
  CorrectAnswer: string <- "hola"
  AnswerTests: omnitest(correctExpr='string <- "hola"')
  Hint: Escribe lo que se te indico.


- Class: text
  Output: Un ejemplo de comillas dentro de un string sería el siguiente string2 <-'Esto es "Esparta"'

- Class: text
  Output: Sí algunas ves olvidas poner las comillas finales en un string te va mandar error en la consola y se quedará corriendo hasta que lo detengas, esto puedes hacerlo presionando la tecla de esc.

- Class: text
  Output: Si quieres incluir literalmente alguna comilla o algún símbolo puedes utilizar una diagonal invertida "\" para que se ignore el símbolo.

- Class: text
  Output: Al utlilizar la diagonal invertida "\" muchos caracteres adqueiren otra función por ejemplo la \n indica un cambio de línea, \t indica una tabulación otro ejemplo importante es "/u00b5" que sirve para escribir caracteres que nos pertenecen al inglés que funcionan en cualquier plataforma.

- Class: cmd_question
  Output: Se pueden guardar strings dentro de un vector, genera uno escribiendo el siguiente código c("a", "bb", "c").
  CorrectAnswer: c("a", "bb", "c")
  AnswerTests: omnitest(correctExpr='c("a", "bb", "c")')
  Hint: Escribe c("a", "bb", "c").

- Class: text
  Output: Longitud de los strings.

- Class: text
  Output: R contiene muchas funciones para trabajar con strings por default, sin embargo suelen se inconsistentes y por lo tanto difíciles de recordar. Nosotros utilizaremos las funciones de stringr que suelen ser más intuitivas y siempre comiezan con un "str_".

- Class: text
  Output: Una de las funciones más comunes es str_length que te devuelve el número de caracteres que tiene un string. 

- Class: cmd_question
  Output: Para que veas su funcionamiento corre el código str_length(c("a", "bb", "b b", NA))
  CorrectAnswer: str_length(c("a", "bb", "b b", NA))
  AnswerTests: omnitest(correctExpr='str_length(c("a", "bb", "b b", NA))')
  Hint: Escribe str_length(c("a", "bb", "b b", NA))

- Class: text
  Output: Combinar Strings.

- Class: text
  Output: Para hacer esto se utiliza la función str_c()

- Class: text
  Output: Por ejemplo str_c("a", "b") regresaría como output "ab"

- Class: text
  Output: Un caso un poco más avanzado sería str_c("a", "b" , sep = "-") regresaría como output "a-b"

- Class: text
  Output: Es posible combinar multiples caracteres.

- Class: cmd_question
  Output: Corre el siguiente código para que veas un ejemplo str_c("Good ", c("morning", "night")).
  CorrectAnswer: str_c("Good ", c("morning", "night"))
  AnswerTests: omnitest(correctExpr='str_c("Good ", c("morning", "night"))')
  Hint: Escribe lo que se te pidió.

- Class: text
  Output: Como en todas las funciones de R, una ves que comprendes como funciona puedes empezar a hacer combinaciones y experimentar.

- Class: text
  Output: Por ejemplo 

- Class: cmd_question
  Output: Define esta variable nombre_alumno <- "Pepe".
  CorrectAnswer: nombre_alumno <- "Pepe" 
  AnswerTests: omnitest(correctExpr='nombre_alumno <- "Pepe"')
  Hint: Usa este código.

- Class: cmd_question
  Output: Ahora define la variable aprobado <- FALSE
  CorrectAnswer: aprobado <- FALSE
  AnswerTests: omnitest(correctExpr='aprobado <- FALSE')
  Hint: Utiliza el código que se te indicó.

- Class: text
  Output: Tienes definida una variable de tipo character y otro de tipo booleano, lo que vamos a hace en el siguiente ejemplo será combinar la función str_c() con un condicional "if()".

- Class: cmd_question
  Output: Escribe el siguiente código str_c( "Felicidades ", nombre_alumno, " ", if (aprobado) " Aprobaste", if(!aprobado) "podrás cursar de nuevo la materia",".")

  CorrectAnswer: str_c( "Felicidades ", nombre_alumno, " ", if (aprobado) " Aprobaste", if(!aprobado) "podrás cursar de nuevo la materia", ".")
  AnswerTests: omnitest(correctExpr='str_c( "Felicidades ", nombre_alumno, " ", if (aprobado) " Aprobaste", if(!aprobado) "podrás cursar de nuevo la materia", ".")')
  Hint: Utiliza el código que se te proporciono.

- Class: text
  Output: Como viste al tener aprobado como false se cumplio la condición de if(!aprobado).

- Class: text
  Output: En el caso de que aprobado fuera TRUE, se escribiría lo que indica la otra condición.

- Class: text
  Output: Ahora veremos subconjuntos de strings.

- Class: text
  Output: Para obtener un substring utilizaremos la función str_sub().

- Class: text
  Output: Los argumentos que esta recibe son

- Class: text
  Output: un string o conjunto de strings

- Class: text
  Output: start <- el lugar del string donde inicia el subconjunto

- Class: text
  Output: end <- el lugar del string donde termina el subconjunto

- Class: text
  Output: Hagamos un ejercicio sencillo de esto

- Class: cmd_question
  Output: define el siguiente vector color <- c("rojo", "azul", "amarillo")
  CorrectAnswer: color <- c("rojo", "azul", "amarillo")
  AnswerTests: omnitest(correctExpr='color <- c("rojo", "azul", "amarillo")')
  Hint: Utiliza lo que se te dió.

- Class: cmd_question
  Output: Utiliza la función str_sub() para  extraer la primera letra de cada color.
  CorrectAnswer: str_sub(color, start = 1, end = 1)
  AnswerTests: omnitest(correctExpr='str_sub(color, start = 1, end = 1)')
  Hint: Utiliza este código str_sub(color, start = 1, end = 1).

- Class: text
  Output: Existen otras funciones que pueden ser muy útiles como son str_to_lower que sirve para hacer las letras minúsculas o str_to_upper para hacerlas mayúsculas, str_sort para ordenar y str_to_title que hace mayúscula a la primer letra de la palabra.

- Class: cmd_question
  Output: En este ejercicio vas a hacer mayúscula la primer letra de cada color. Deberas utlizar la función str_sub dentro de str_to_upper pero ojo, esto sólo te arrojará los valores que pides, tienes que definir a estás letras como las nuevas letras inciales.
  CorrectAnswer: str_sub(color, 1, 1) <- str_to_upper(str_sub(color, 1, 1))
  AnswerTests: omnitest(correctExpr='str_sub(color, 1, 1) <- str_to_upper(str_sub(color, 1, 1))')
  Hint: Esta es la respuesta correcta str_sub(color, 1, 1) <- str_to_upper(str_sub(color, 1, 1))

- Class: cmd_question
  Output: Escribe color para que veas como quedó el vector.
  CorrectAnswer: color
  AnswerTests: omnitest(correctExpr='color')
  Hint: Escribe color.
