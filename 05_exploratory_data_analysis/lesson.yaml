- Class: meta
  Course: swirl-rfordatascience
  Lesson: 05_exploratory_data_analysis
  Author: Marcos Daniel Montaño Delgado
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: En este capítulo revisaremos la visualización y transformación para la exploración de datos de manera sistemática; o lo que es lo mismo, análisis exploratorio de datos. Se trata de un ciclo iterativo donde

- Class: text
  Output: 1 Generas preguntas sobre tus datos.
          

- Class: text
  Output: 2 Buscas respuestas al visualizar, transformar, y modelar tus datos.

- Class: text
  Output: 3 Usas lo que aprendes para refinar las preguntas y/o generar nuevas preguntas.

- Class: text
  Output: Durante el capítulo se aplicarán las librerías 'dyplr' y 'ggplot2' que se vieron en capítulos anteriores para poder trabajar con los datos de manera interactiva.

- Class: text
  Output: La exploración análitica de datos es en principio creatividad. Al querer trabajar con los datos se generan preguntas que en un principio son difíciles de contestar puesto que no sabemos como vienen nuestros datos.

- Class: text
  Output:  Existen dos preguntas que nos serán muy útiles para empezar a analizar nuestros datos que son

- Class: text
  Output: ¿Qué varianza hay entre los datos?

- Class: text
  Output: ¿Qué covarianza hay entre los datos?

- Class: text
  Output: Existen ciertos conceptos que debemos de tener claros antes de comenzar el capítulo

- Class: text
  Output: 1.- Variable --> Es un propiedad de cantidad o calidad que es medible.

- Class: text
  Output: 2.- Valor--> Es lo que arroja la variable al ser medida.

- Class: text
  Output: 3.- Obsevación--> Es una serie de pruebas que se hacen bajo condiciones similares a nuestros datos en las que al final se asocian diferentes valores a diferentes variables o conjuntos de datos.

- Class: text
  Output: 4.- Datos Tabulados--> Es una serie de datos asociados a varibles y observaciones. Es importante reocordar que los datos tabulados están ordenados si cada valor está en su propio espacio , cada variable en su respectiva columna y cada observación en su propia fila.

- Class: text
  Output: Varianza--> Podemos definirla como la tendencia que tienen las variables de cambiar entre una medición y la otra. Esto siempre se cumple ya que en toda medición se tiene al menos un pequeño error. Dependiendo de la variable es el tipo de error que se va a presentar sin embargo la mejor forma de entender este tipo de errores es encontrando la distribución que modela a nuestro conjunto de variables.

- Class: text
  Output: Visualizando Distribuciones--> Lo primero que hay que ver es el tipo de variable, analizaremos de dos tipos

- Class: text
  Output: 1 Categóricas-->Tipo de variable que puede tomar un sólo valor de un cojunto limitado de valores donde estos son mutuamente excluyentes. Estas se pueden analizar con una gráfica de barras.

- Class: figure
  Output: Aquí podemos ver un ejemplo en el que se separan por la variable especie.
  Figure: fish.R
  FigureType: new

- Class: text
  Output: 2 Continuas-->Se define como continua si puede tomar cualquier valor de un conjunto infinito de valores, para examinar su distribución utilice un histograma. Para hacer un histograma se divide el eje x entre el número de columnas que se quiera tener y la altura se define por el número de observaciones que caigan en el rango.
     
- Class: script
  Output: En el caso de las variables continuas es conveniente usar histogramas para analizarlas pues nos muestra el comportamiento de los valores. Grafíca un histograma utilizando ggplot, geom-histogram, la Data Frame ya esta cargada como df y la variable que debes graficar se llama dep que tiene valores de tiempo de vuelo de un conjunto de aviones.
  AnswerTests: omnitest(correctExpr='ggplot( data = df) + geom_histogram(mapping = aes(x = dep),binwidth = .95)')
  Hint: ggplot( data = df) + geom_histogram(mapping = aes(x = dep),binwidth = .95)
  Script: hist.R



- Class: text
  Output: Los histogramas como se menciono anteriormente son gráficos que nos permiten ver como se comporta el conjunto de variables

- Class: text
  Output: Funciona de la siguiente manera --> Se divide en espacios o rangos iguales, seguido de esto la altura se determina por la cantidad de valores del conjunto que caen en cada uno.

- Class: text
  Output: Para ajustar el ancho de los intervalos se utiliza el argumento width, es importante experimentar con esto por que nos puede ayudar a determinar el patrón correcto que modela nuestro conjunto o al menos los estima.

- Class: figure
  Output: Al momento de que se necesite hacer una superposición de varios datos, y los queremos en una sola gráficación, lo más recomendable es usar la función geom_freqpoly().
  Figure: freq.R
  FigureType: new

- Class: text
  Output: Pasando al analisis de los datos, al momento de que nosotros graficamos nuestro conjunto de datos en un histograma, podemos obtener valores inusuales, pero para poder apreciarlos en un gran conjunto de dtos tenemos quee utilizar la función coord_cartesian()

- Class: figure
  Output: Aquí podrás ver la implementación de la función coordenada carteciana.
  Figure: coordC.R
  FigureType: new

- Class: text
  Output: Existen dos formas en las cuales puedes deshacerte de valores que no existen (valores NA), en realidad existen dos opciones para quitar este tipo de datos de tu dataset.

- Class: text
  Output: La primera forma no es muy recomendable,sobre todo cuando se tiene una medición que no es valida,en otras palabras valores que son raros o que probovocan ruidos en la gráfica, y para su despresición la opción es la siguiente --> diamonds2 <- diamonds %>% filter(between(y, 3, 20))

- Class: text
  Output: La segunda opción que se dará a continuación es la adecuada para remplazar los valores raros por valores NA y es la opción que se recomienda para no alterar los resultados al graficar, está opcioón es la siguiente --> diamonds2 <- diamonds %>% mutate(y = ifelse(y < 3 | y > 20, NA, y)).

- Class: text
  Output: El primer argumento de la función verifica que se trate de un vector lógico, el segundo toma el valor del vector cuando sea TRUE, y el ultimo no contendrá un valor esto es cuando sea FALSE.

- Class: text
  Output: Lo anterior nos lleva a querer comparar los valores perdidos de los valores registrados, para ejemplificar lo anterior haremos uso del conjunto de datos flights, el cual tiene valores perdidos la variable dep_time, y estos nos pueden indicar la cancelación de vuelos.

- Class: cmd_question
  Output: Escribe la siguiente función y observa que para hcer las comparaciones de valores perdidos contra los registrados usaremos la función is.na(). Escribe la siguiente función y observa el resultado
  CorrectAnswer: Expression or Valuenycflights13::flights %>% mutate(cancelled = is.na(dep_time),sched_hour = sched_dep_time %/% 100,sched_min = sched_dep_time %% 100, sched_dep_time = sched_hour + sched_min / 60) %>% ggplot(mapping = aes(sched_dep_time)) + geom_freqpoly(mapping = aes(color = cancelled), binwidth = 1/4)
  AnswerTests: omnitest(correctExpr='Expression or Valuenycflights13::flights %>% mutate(cancelled = is.na(dep_time),sched_hour = sched_dep_time %/% 100,sched_min = sched_dep_time %% 100, sched_dep_time = sched_hour + sched_min / 60) %>% ggplot(mapping = aes(sched_dep_time)) + geom_freqpoly(mapping = aes(color = cancelled), binwidth = 1/4)')
  Hint: Tú puedes!!
