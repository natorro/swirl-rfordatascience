- Class: meta
  Course: Ciencia de datos con R
  Lesson: data_transformation
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3


- Class: text
  Output: En este capituo nos centraremos en la funcionalidad del paquete dplyr, 
          con esta herramienta se podrá generar nuevas variables o resumenes, 
          renombrar las variables o reordenar las observaciones, entre otras muchas cosas.
          
  
- Class: script
  Output: Para visualizar los datos que se analizaran en esta sección escriba "flights"
  CorrectAnswer: flights
  
- class: text
  output: ¿Cuál es la diferencia de éste conjunto de datos a los demás? 
          A diferencia de los demas conjuntos de datos este, sumarco se ajusta al tamaño de la consola,
          se imprime de esta manera porque es un tibble.
          Tibble <- Es un marco de datos, pero ligeramente ajustado para que mejore su funcionamiento en el tidyvers.
  
  Class: text 
  output: Uno de los conceptos básicos para manejar un conjunto de datos,
          es el comando filter(). La función nos ayuda a encontrar un grupo
          de datos en especifico.
          Para esto se utilizan los parametros de busqueda, en el primer parametro va 
          el nombre del conjunto de datos analizados, los otros dos parametros son 
          los de busqueda especifica que puede ser por mes, año,etc.
          
  class: script
  output: Escribe la función filter() con parametros que busquen los datos de los
          vuelos en el mes 1 del día 1.
  CorrectAnswer: fitlter(flights, month == 1, day == 1)
  AnwserTest: expr_uses_func('filter')
  Hint: intenta igualando los dos parametros con uno.
  
  class: text 
  output: Como puedes ver, esta función despliega un nuevo marco de un conjunto 
          de datos con las expreciones que fueron especificadas en la función filter(),
          para guardar este nuevo conjunto de datos lo tenemos que hacer mediante
          una variable.
          
  class: mult_question 
  output: ¿Qué piensas que puede hacer R al guardar los datos en una variable?
  AnswerChoices: Imprimir los datos; Guardar en la variable; Guardar e Imprimir;
                  No los guarda
                  
  CorrectAnswer: Guardar en la variable 
  AnwserTest: "Guardar en la variable"
  Hint: Se guardan en la variable y si lo deceas puedes imprimirlos
        con solo hacer un llamado a la variable.
  
  class: cm_question
  output: Si tenemos un conjunto de datos complicados de analizar, lo podemos simplificar
          en subconjunbtos, esto se logra recordando la ley de morgan !(x & y), de 
          que otra forma lo puedes reprecentar con operadores lógicos?
  AnwserTest: any_of_exprs('!x | !y','!(x | y)', '!x & !y')
  Hint: tambié se puede representar como una or negada.
  
  class: text
  output: Una caracteristica importante de R que puede dificultar la comparación es la falta 
          de valores(o valores perdidos "NA"), ya que cualquier operacion con un valor 
          desconocido también será desconocido.
  
  class: text
  output: Para hacer busqueda en el conjunto de datos de un dato vacio, usamos la función
          is.na(), como parametro recibirá la variable en donde almacenamos los datos que
          queremos analizar.Este mismo funciona como un parametro de busqueda al utilizar 
          la función filtro.
          
  class: text
  output: Ejemplo de esto seria 
          filter(df, is.na(x) | x > 1)
  
  class: text
  output: La función arrange funciona igual que filter; a diferencia de filter, arrange
          reordena las coumnas. utiliza los parametros para ordenar los datos, por ejemplo,
          si queremos ordenar los datos por año, mes y día, estos tres se los pasamos como
          parametros a la función si olvidar que primero va el nombre de la variable que 
          contiene los datos que vamos a ordenar.
          
  class: text
  output: Podemos utilizar el parametro desc("nombre de la columna"), para ordenar el 
          conjunto de datos en forma decendente.
  
  class: cm_question
  output: Con el conjunto de datos de flights usa la función de arrange y ordena la 
          clumna arr_time de forma descendente.
  CorrectAnswer: arrange(flights, desc(arr_delay))
  AnwserTest: expr_uses_func('arrange')
  Hint: Usa la función arrange y el nombre del conjunto junto con el parametro desc().
  
  class: text
  output: Otra función de ayuda para manipular los datos es *selec(), nos permite acercarnos
          rápidamente a un subconjunto útil utilizando operaciones basadas en los nombres de 
          las variables del conjunto de datos.
          
  
  calss: text
  output: Bien ahora pasemos a la practica, como en las funciones anteriores, a esta función
          le puedes pasar como parametros del nombre de las variables de los datos que 
          quieras analizar.
          
  class: cm_question
  output: Una de las formas para pasar un conjunto de parametros, es pasandolos como una lista.
          Usando selec() pasa como parametros el año,mes y día en forma de lista.
  CorrectAnswer: selec(flights, year:day)
  AnwserTest: expr_uses_func('selec')
  Hint: Utiliza  year:day como segundo parametro y flights como el primer parametro.
  
  class: text 
  output: Hay una serie de auxiliares que puedes usar dentro de selec().
          * starts_with("abc"); coincide con nombres que empiecen con abc
          * ends_with("xyz");   coincide con nombres que terminen con xyz
          * contains("ijk");    coincide con nombres que contengan ijk
          * matches("(.)\\1");  selecciona variables que coincidan con una expresión.
                                este ejemplo coincide con cualquier variable que contenga
                                caracteres repetidos.
          * num_range("x", 1:3); coincide con x1,x2 y x3.

  class: text
  output: Para poder cambiar el nombre de una de las columnas utilizamos la función rename(),
          pasandole como segundo parametro del nombre al que se quiere cambiar e igualando al 
          existente, ademas concerva todas las variables que no se mencionan explicitamente.

  class: text
  output: Si se quiere agregar columanas a las ya existentes, podemos utilizar la funcion 
          mutate(), esta nos permitira agregar nuevas columnas (variables) al conjunto ya existente.
          antes de usar la función, tenemos que seleccionar los datos en los que vamos a trabajar
          y guardarlos en una variable para que este pase a ser el primer parametro de 
          referencia de la función mutate().

  class: mult_question
  output: aparte de agregar las dos columnas,sería posible que a los parametros les asignemos
          operaciones entre columnas 
  AnswerChoices: si, no
  CorrectAnswer: si
  AnwserTest: omnitest(correctVal='si')
  
  class: mult_question
  output: ¿Cómo visualizarias el resultado en el marco de datos, en un conjunto de datos o 
          en un solo resultado?
  AnswerChoices: En un conjunto de datos, En un solo resultado por cada variable agregada
  CorrectAnswer: En un conjunto de datos
  AnwserTest: omnitest(correctVal='En un conjunto de datos')
  Hint: Se visualizaran en un conjunto de datos por cada variable.
  
  class: cm_question
  output: Escribe la siguiente funcion
          mutate(flights_sml,gain = arr_delay - dep_delay,speed = distance / air_time * 60)
  CorrectAnswer: mutate(flights_sml,gain = arr_delay - dep_delay,speed = distance / air_time * 60)
  AnwserTest: expr_uses_func('mutate')
  
  
  class: text 
  output: La ultima función es summarize(), ésta función colapsa un marco de datos a una sola fila,
          por lo regular esta función la complementan con group_by().
          Esto hace que cambie completamente el análisis del conjunto de datos completo 
          para indicar grupos individuales.
  
  class: text
  output: Cuando se usan los verbos dplyr en un marco de datos agrupados, se aplicaran automaticamente
          por grupo.
          
  class: cm_question
  output: 
  


