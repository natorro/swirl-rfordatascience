- Class: meta
  Course: swirl-rfordatascience
  Lesson: 08_data_import_with_readr
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: En este capitulo aprenderas a leer archivos de texto plano en R usando las propiedades de importar datos.

- Class: cmd_question
  Output: Como es costumbre, iniciaremos por cargar la biblioteca de Tidyverse. Ejecuta el código necesario para ello.
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr='library(tidyverse)')
  Hint: usa la función library()

- Class: text
  Output: la función de readr's es la de convertir textos planos en data frames, teniendo como conjunto de funciones a read_csv() y read_csv2() que se diferencian en el cómo estan separados los valores, si por coma o por semicolon respectivamente.

- Class: text
  Output: read_tsv() lee archivos delimitados por tabuladores, y read_delim() lee archivos con cualquier delimitante, lo cual la convierte en la función mas flexible para leer archivos.

- Class: text
  Output: read_fwf() lee archivos con un ancho fijo, los cuales se pueden especificar en campos con fwf_widths() o ayudar a encontrar su posición con fwf_positions(). 

- Class: text
  Output: read_log() lee archivos de estilo apache o webreadr.

- Class: text
  Output: Para poder usar read_csv(), debes entender que la parte crucial para que funcione se encuentra en la dirección que usas para ubicar un archivo a leer, y que esta lectura la puedes asignar a  un data frame. Esto lo logras poniendo la dirección del directorio donde se encuentra el archivo dentro de la función.
  
- Class: cmd_question
  Output: El csv que vamos a usar en la lección se encuentra alojado en un objeto llamado "direccion", es necesario que uses la función print() en este objeto
  CorrectAnswer: print(direccion)
  AnswerTests: omnitest(correctExpr='print(direccion)')
  Hint: Usa print(direccion)

- Class: cmd_question
  Output: A la ubicación que se te mostro anteriormente, la completaremos con el nombre del archivo profesores.csv para poder cargarlo. Para ello usaremos la función file.path() con el objeto direccion seguido del nombre del archivo csv y guardaremos la dirección en un objeto llamado "direccion_completa"
  CorrectAnswer: direccion_completa <- file.path(direccion, "profesores.csv")
  AnswerTests: omnitest(correctExpr='direccion_completa <- file.path(direccion, "profesores.csv")')
  Hint: Usa el código direccion_completa <- file.path(direccion, "profesores.csv")

- Class: cmd_question
  Output: Lee el archivo profesores.csv usando la funcion read_csv() en el objeto "direccion_completa" y guardalo dentro de un data frame llamado "profesores". Toma en cuenta que dentro del código que uses mas adelante puedes usar la dirección completa de la ubicación de tu archivo en lugar del objeto
  CorrectAnswer: profesores <- read_csv(direccion_completa)
  AnswerTests: omnitest(correctExpr='profesores <- read_csv(direccion_completa)')
  Hint: Usa profesores <- read_csv(direccion_completa)

- Class: text
  Output: Cada vez que usas la fucnión read_csv() se te mostrará un mensaje que contiene el nombre y tipo de columna que se creo dentro del data frame.

- Class: text
  Output: Algo interesante que puedes lograr con la función read_csv() es leer un csv sin tener que ingresar un archivo.

- Class: cmd_question
  Output: Intenta crear uno, usa el siguiente arreglo de caracteres para crear un csv desde la función read_csv(), "a, b, c\n5, 8, 3\n9, 3, 7"
  CorrectAnswer: read_csv("a, b, c\n5, 8, 3\n9, 3, 7")
  AnswerTests: omnitest(correctExpr='read_csv("a, b, c\n5, 8, 3\n9, 3, 7")')
  Hint: Usa el codigo read_csv("a, b, c\n5, 8, 3\n9, 3, 7")

- Class: text
  Output: read_csv() usa la primera fila de los datos que se encuentran en el csv como los nombres para las columnas, lo cual es una convención muy comun; pero en algunos casos la primera fila de los archivos estan llenos de datos que no corresponden con el nombre o con datos que queremos extraer, por lo que es de gran ayuda que exista el atributo skip = n, el cual te permite saltar n numero de lineas e iniciar la lectura en la inea inmediata

- Class: text
  Output: Tambien existe comment = "#", el cual permite comentar las lineas que empiezen con el caracter que especifiques

- Class: text
  Output: Si los datos no tienen nombre de columna, puedes usar col_names = FALSEpara indicarle a la funcion read_csv() que no trate a la primera linea como encabezados, si no que los trate bajo el nombre de X1 a Xn

- Class: cmd_question
  Output: Intentemos realizar un ejemplo de read_csv() sin nombres, usando el arreglo "1,2,3\n4,5,6" y asignando el valor FALSE a col_names
  CorrectAnswer: read_csv("1,2,3\n4,5,6", col_names = FALSE)
  AnswerTests: omnitest(correctExpr='read_csv("1,2,3\n4,5,6", col_names = FALSE)')
  Hint: Usa el codigo read_csv("1,2,3\n4,5,6", col_names = FALSE)

- Class: text
  Output: Tambien puedes usar un vector con los nombres de las columnas cuando requieras de mantenerlos separados y organizados

- Class: cmd_question
  Output: usemos el atributo col_names = c(), donde a c() le corresponderian los nombres ("gatos", "perros", "peces"), para los datos "65, 26, 83\n93, 23, 92" en la función read_csv()
  CorrectAnswer: read_csv("65, 26, 83\n93, 23, 92", col_names = c("gatos", "perros", "peces"))
  AnswerTests: omnitest(correctExpr='read_csv("65, 26, 83\n93, 23, 92", col_names = c("gatos", "perros", "peces"))')
  Hint: La respuesta es read_csv("65, 26, 83\n93, 23, 92", col_names = c("gatos", "perros", "peces"))


- Class: text
  Output: En algunas ocasiones, existe un formato para indicar que un espacio en tu csv esta vacio, para indocarle esto a R y que los tome como vacios puedes usar el atributo na = "", donde puedes indicarle que trate a todos los espacios que encuentre con esa definicion como nulos

- Class: cmd_question
  Output: lee el output del código read_csv("Bebida,papas,hamburguesa\nSi,.,Si\n.,.,Si\nSi,.,.\nSi,Si,Si", na = ".") y verifica en que convirtio los registros que contenian .
  CorrectAnswer: read_csv("Bebida,papas,hamburguesa\nSi,.,Si\n.,.,Si\nSi,.,.\nSi,Si,Si", na = ".")
  AnswerTests: omnitest(correctExpr='read_csv("Bebida,papas,hamburguesa\nSi,.,Si\n.,.,Si\nSi,.,.\nSi,Si,Si", na = ".")')
  Hint: solo copia read_csv("Bebida,papas,hamburguesa\nSi,.,Si\n.,.,Si\nSi,.,.\nSi,Si,Si", na = ".")

- Class: text
  Output: Todos los modos en que puedes emplear read_csv() que mostramos durante el curso se pueden adaptar a las funciones de lectura de otras extensiones de archivo, como readtsv() y read_fwf(). 

- Class: text
  Output: ¿Como es que hasta el momento usamos read_csv() sobre la función base de read.csv() en R? Muy simple, es mas ventajoso en las siguientes cualidades(:)

- Class: text
  Output: La velocidad de procesamiento de la función de lectura de tidyverse llega a ser 10 veces mas veloz, y muestra una barra indicadora del progreso del proceso

- Class: text
  Output: Produce tibbles, los cuales te protegen de errores comunes en la función base de R, y te salva de varias frustraciones con la conversión de tipos de datos.

- Class: text
  Output: La función de tidyverse es independiente del equipo que estes utilizando, a diferencia de su contraparte, que toma algunos recursos y depende de la configuración de algunos equipos donde se ejecute, por lo que nos ofrece mas portabilidad en código.
  

- Class: text
  Output: Ahora bien, para sacar provecho de la funcionalidad de lectura, necesitas aprender a usar las funciones parse_*(), lo cual se puede traducir a funciones que convierten datos a un tipo de dato especifico, añadiendo propiedades lógicas, de caracteres especiales, agrupación exclusiva de numeros o conversión a fechas.

- Class: cmd_question
  Output: Como ejemplo convertiremos una serie de cadenas descriptivas del orden en que se aplica el tipo de dato booleano; para ello ejecuta la siguiente linea de código(:) str(parse_logical(c("TRUE", "FALSE", "NA")))
  CorrectAnswer: str(parse_logical(c("TRUE", "FALSE", "NA")))
  AnswerTests: omnitest(correctExpr='str(parse_logical(c("TRUE", "FALSE", "NA")))')
  Hint: ingresa el código str(parse_logical(c("TRUE", "FALSE", "NA")))

- Class: text
  Output: Como te habras dado cuenta, el resultado de la ejecución del codigo es una linea que inicia con logi, el cual indica que se aplicó el tipo de dato lógico a la cadena, en el orden especificado(:) TRUE, equivalente a 1, FALSE correspondiente a 0 y NA, que declara vacio, pero estas ya no son solo cadenas, si no que ademas indican un estado booleano al usarse. 

- Class: text
  Output: Si por alguna razón falla la conversión a tipo de dato de una serie de cadenas a, por ejemplo, números enteros, y entre las cadenas se encuentran letras, la función te devolvera un mensaje de error indicando que datos fueron imposibles de convertir, debido a que conflictuan con la definición del tipo de dato al que pretendias convertirlos.

- Class: cmd_question
  Output:     Para testear el error, intenta convertir el arreglo c("75", "465", "número", "24", "veinticinco") a números enteros con la función parse_integer(), guardandolos en un dataframe llamado enteros
  CorrectAnswer: enteros <- parse_integer(c("75", "465", "número", "24", "veinticinco"))
  AnswerTests: omnitest(correctExpr='enteros <- parse_integer(c("75", "465", "número", "24", "veinticinco"))')
  Hint: Recuerda que para guardar en un data frame el resultado de una operación se utiliza enteros <-

- Class: cmd_question
  Output: Ahora llama al objeto para revisar que datos no resultaron aptos para la conversión, pero con la función problems(), que te desglosa todos los problemas que contiene el objeto enteros devueltos en un tibble
  CorrectAnswer: problems(enteros)
  AnswerTests: omnitest(correctExpr='problems(enteros)')
  Hint: intenta con problems(enteros)

- Class: text
  Output: Las funciones parse() que encontras son(:) Parse_logical(), parse_integer(), parse_double(), parse_character(), parse_factor(), parse_datetime(), parse_date() y parse_time(), haciendo referencia al tipo de dato en el cual vas a convertir el arreglo que ingreses.

- Class: text
  Output: Ahora bien, surgen algunos problemas al intentar convertir datos en varios contextos, por lo que describiremos algunas precauciones que se deben de tomar al convertir ciertos tipos de datos

- Class: text
  Output: Para los numéricos, existe el problema del contexto y procedencia, ya que un arreglo de datos puede estar dentro del contexto de moneda $56.40 con una separación de decimales en cada parte del mundo, pudiendo ser tanto un . como una , o de porcentaje 70%, lo cual representa un conflicto con las reglas que parse sigue para aceptar o negar datos. 

- Class: text
  Output: Afortunadamente las funciones de parse() en readr cuentan con la herramienta locale, la cual abre la oportunidad para establecer los signos de puntuación que separan decimales o montos de moneda en el cual trabaja el conjunto de datos, indicandole a R de que manera debe atacar el problema

- Class: cmd_question
  Output: Como ejemplo convertiremos un numero doble que separaron con , para indicar decimales, pero que aroojará un error si no se usa locale de la siguiente forma(:) parse_double("97,632", locale = locale(decimal_mark = ","))
  CorrectAnswer: parse_double("97,632", locale = locale(decimal_mark = ","))
  AnswerTests: omnitest(correctExpr='parse_double("97,632", locale = locale(decimal_mark = ","))')
  Hint: Copia el codigo que se te indica en la pregunta y presta atención al resultado.

- Class: text
  Output: la función parse_number() es bastanteutil para extrar solo los numeros de una cadena, facilitando la extracción de caracteres agregados por contexto como $, #, % o pesos

- Class: cmd_question
  Output: intentemos aplicar parse_number() con el dato "200% de rebaja"
  CorrectAnswer: parse_number("200% de rebaja")
  AnswerTests: omnitest(correctExpr='parse_number("200% de rebaja")')
  Hint: ingresa la cadena en la función que se indico

- Class: cmd_question
  Output: Ahora aplicaremos un ejemplo combinatorio de ambas soluciones, al ejecutar la función parse_number() con la propiedad locale para transformar un dato "costo 200,00,00 libras" en números puros usando locale = locale(grouping_mark = ','), puedes usar como referencia la pregunta anterior donde usamos estas funciones y resolver como se pueden combinar
  CorrectAnswer: parse_number("costo 200,00,00 libras", locale = locale(grouping_mark = ","))
  AnswerTests: omnitest(correctExpr='parse_number("costo 200,00,00 libras", locale = locale(grouping_mark = ","))')
  Hint: La respuesta es parse_number("costo 200,00,00 libras", locale = locale(grouping_mark = ","))

- Class: text
  Output: Una vez dominado el uso de parse_number(), podremos entender las implicaciones de usar parse_character(), función que puede parecer sencilla a primera vista, pero que cumple funciones importantes para el análisis de datos que requieran de ingreso de datos en el extranjero, como la función charToRaw() lo demustra.

- Class: cmd_question
  Output: Ingresa la palabra "Ciencia" en la función charToRaw, y evalua el mensaje que se te presento. 
  CorrectAnswer: charToRaw("Ciencia")
  AnswerTests: omnitest(correctExpr='charToRaw("Ciencia")')
  Hint: La solución es charToRaw("Ciencia")

- Class: mult_question
  Output: ¿Cúal es la función más probable que cumple charToRaw() basandote en el mensaje que desplegó?
  AnswerChoices: Es el número de letras disponibles en todo el texto;Muestra la transformación de la cadena en hexadecimal, correspondiente a su codificación en ASCII;Número que indica la posición de las letras en el alfabeto
  CorrectAnswer: Muestra la transformación de la cadena en hexadecimal, correspondiente a su codificación en ASCII
  AnswerTests: omnitest(correctVal='Muestra la transformación de la cadena en hexadecimal, correspondiente a su codificación en ASCII')
  Hint: Recuerda que en programación usamos la palabra codificación mucho.

- Class: text
  Output: Exactamente, transforma los caracteres a su codificación en ASCII, el cual, para no entrar en muchos detalles, lo trataremos como un código estandar que usa la computadora para saber a que caracter nos estamos refiriendo.

- Class: text
  Output: Normalmente otros lenguajes diferentes al español o el ingles, cuentan con una codificación diferente debido a la gran variedad de estandares de codificación de caracteres que satisfacen las necesidades de cada idioma, por lo que la necesidad de crear un estandar universal llamado UTF-8 se hizo cada vez mas evidente, para poder comunicarnos bajo un mismo estandar. readr usa esta codificación como su configuración predeterminada, y así ofrecer un medio para transformar varias codificaciones.

- Class: cmd_question
  Output: Obten la codificación que se usa en el español usando guess_encoding() en la frase "La piña esta en la canasta de mi mamá"
  CorrectAnswer: guess_encoding("La piña esta en la canasta de mi mamá")
  AnswerTests: omnitest(correctExpr='guess_encoding("La piña esta en la canasta de mi mamá")')
  Hint: Ingresa la cadena en la función

- Class: cmd_question
  Output: Obten la codificación de la frase "La piña esta en la canasta de mi mamá" con charToRaw() anidada en guess_encoding() para saber en que codificación podemos encontrar la ñ
  CorrectAnswer: guess_encoding(charToRaw("La piña esta en la canasta de mi mamá"))
  AnswerTests: omnitest(correctExpr='guess_encoding(charToRaw("La piña esta en la canasta de mi mamá"))')
  Hint: Ingresa la cadena en la función charToRaw(), y esa expresión anidala en guess_encoding()

- Class: mult_question
  Output: Tomando en cuenta los resultados que mostro el codigo anterior, donde encoding muestra el estandar, y confidence el porcentaje de caracteres que se encontraron en esa codificación, ¿cual dirias que es la codificación que engloba mas caracteres?
  AnswerChoices: ISO-8859-2;UTF-8;ISO-8859-1
  CorrectAnswer: ISO-8859-1
  AnswerTests: omnitest(correctVal='ISO-8859-1')
  Hint: Recuerda que el porcentaje lo puedes encontrar en confidence

- Class: cmd_question
  Output: Una vez ubicada la ccodificación en la que se encuentra nuestro texto, podremos transformarlo a UTF-8, usando parse_character(), y la utilidad locale = locale(encoding = ""), en la cual insertaremos la codificación arrojada anteriormente. Ingresa el codigo correcto teniendo en cuenta las respuestas a preguntas anteriores, usando el mismo texto "La piña esta en la canasta de mi mamá" y la codificación ISO-8859-1.
  CorrectAnswer: parse_character("La piña esta en la canasta de mi mamá", locale = locale(encoding = "ISO-8859-1"))
  AnswerTests: omnitest(correctExpr='parse_character("La piña esta en la canasta de mi mamá", locale = locale(encoding = "ISO-8859-1"))')
  Hint: La respuesta es parse_character("La piña esta en la canasta de mi mamá", locale = locale(encoding = "ISO-8859-1"))

- Class: text
  Output: Listo! tu texto esta codificado de manera correcta en UTF-8, ya no tendras que preocuparte por errores en algunos caracteres especiales si sigues la sanitización de datos con tus cadenas de esta forma.

- Class: text
  Output: Una funcionalidad importante que se le puede aplicar a un arreglo de datos es asignarle factores para representar variables categóricas, lo cual puede ser útil para crear catálogos o delimitar los datos que pueden ser ingresados en un campo.

- Class: text
  Output: parse_factor() permite ingresar un arreglo para generar una notificación cada vez que se presente un valor no especificado en el arreglo, cumpliendo la función de restringir los datos que son ingresados en una tabla

- Class: cmd_question
  Output: Asigna el catalogo c(Rojo, Azul, Verde, Amarillo) en el objeto "colores"
  CorrectAnswer: colores <- c(Rojo, Azul, Verde, Amarillo)
  AnswerTests: omnitest(correctExpr='colores <- c(Rojo, Azul, Verde, Amarillo)')
  Hint: Para asignar el catalogo debes de tratar al objeto como un dataframe, colores <- y poniendo a continuación el arreglo

- Class: cmd_question
  Output: Ahora usa la función parse_factor() en el siguiente arreglo c(Azul, Blanco, Rojo, Negro) defininedo la utilidad levels = colores
  CorrectAnswer: parse_factor(c(Rojo, Azul, Verde, Amarillo), levels = colores)
  AnswerTests: omnitest(correctExpr='parse_factor(c(Rojo, Azul, Verde, Amarillo), levels = colores)')
  Hint: Usa la función de la siguiente forma parse_factor(c(Rojo, Azul, Verde, Amarillo), levels = colores)

- Class: text
  Output: tambien puedes usar la función parse() con datos para convertirlas a fechas, facilitando el uso de estandares para su lectura

- Class: text
  Output: existen 3 tipos de datos de fechas, los cuales se dividen en fecha (el número de dias desde 1970-01-01), una fecha-hora (el número de segundos desde la media noche de 1970-01-01), o una hora (el número de segundos desde la medianoche del dia presente)

- Class: cmd_question
  Output: parse_datetime() genera fechasen el estandar ISO8601 en el cual los digitos se arreglan de mayor a menor, año, mes, dia, hora, minuto y segundo. Usa la cadena "2018-12-30T2010" con la función y observa el resultado que arroja
  CorrectAnswer: parse_datetime("2018-12-30T2010")
  AnswerTests: omnitest(correctExpr='parse_datetime("2018-12-30T2010")')
  Hint: solo ingresa la cadena con "" dentro de los parentesis de la funcion

- Class: cmd_question
  Output: parse_date() siempre recibirá de entrada una fecha en concreto, con separadores entre el mes y dia como - o /, como "2018-05-21", cadena que debes de ingresar en la función para continuar con la lección
  CorrectAnswer: parse_date("2018-05-21")
  AnswerTests: omnitest(correctExpr='parse_date("2018-05-21")')
  Hint: solo ingresa la cadena "2018-05-21" en la función parse_date()

- Class: cmd_question
  Output: Para poder iniciar con el comando de horas es necesario que carguemos la biblioteca hms, la cual nos permite manejar de una manera mas precisa las horas, minutos y segundos
  CorrectAnswer: library(hms)
  AnswerTests: omnitest(correctExpr='library(hms)')
  Hint: Recuerda que cargamos las bibliotecas con library()

- Class: cmd_question
  Output: parse_time() espera que ingreses una hora, la cual puede tener formato de 24 horas o con un indicador am o pm opcional. Siempre separando las horas de los minutos con un (:), con la opción de incluir segundos de la misma forma. Ahora ingresa la cadena "10:20 pm" a la función para transformarla en una hora.
  CorrectAnswer: parse_time("10:20 pm")
  AnswerTests: omnitest(correctExpr='parse_time("10:20 pm")')
  Hint: ingresa la cadena "10:20 pm" en parse_time()


- Class: text
  Output: Ahora que tienes las bases de aplicar parse() a variables y vectores, es tiempo de regresar a los archivos para poder procesar grandes cantidades de datos

- Class: cmd_question
  Output: Puedes usar la función guess_parser() con cualquier cadena de datos, para que readr pueda hacer una busqueda del formato mas adecuado de acuerdo a las reglas que cada tipo de dato tiene, usa la cadena "1456,2324,356" con la función
  CorrectAnswer: guess_parser("1456,2324,356")
  AnswerTests: omnitest(correctExpr='guess_parser("1456,2324,356")')
  Hint: solo usa la cadena dentro de la función como lo has hecho en ocasiones anteriores

- Class: mult_question
  Output: ¿Cual sera el output de guess_parser() con la cadena "TRUE"?
  AnswerChoices: date;time;logical;integer
  CorrectAnswer: logical
  AnswerTests: omnitest(correctVal='logical')
  Hint: Recuerda los tipos de datos que existen.

- Class: text
  Output: con esta función llegan a presentarse algunos problemas con archivos que presentan casos excepcionales en los primeros 1000 registros, cauando que algunos datos críticos no sean leidos en archivos lo suficientemente grandes, o que haya tantos NA que readr piense que es un dato a transformar.

- Class: cmd_question
  Output: Para revisar esto readr tiene un archivo que demuestras los errores, por lo que debes ejecutar el siguiente código(:) errores <- read_csv(readr_example("challenge.csv"))
  CorrectAnswer: errores <- read_csv(readr_example("challenge.csv"))
  AnswerTests: omnitest(correctExpr='errores <- read_csv(readr_example("challenge.csv"))')
  Hint: Solo copia y pega errores <- read_csv(readr_example("challenge.csv"))

- Class: cmd_question
  Output: Para poder revisar a mas detalle los errores que se mostraron hay que usar la función problems() en el objeto errores
  CorrectAnswer: problems(errores)
  AnswerTests: omnitest(correctExpr='problems(errores)')
  Hint: intenta problems(errores)

- Class: cmd_question
  Output: Para poder corregir este error, podemos usar la estrategia de leer mas de 1000 registros, por lo que podemos repetir la lectura si usamos el código errores2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
  CorrectAnswer: errores2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
  AnswerTests: omnitest(correctExpr='errores2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)')
  Hint: Copia el codigo errores2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)

- Class: text
  Output: Una de las funciones mas usadas de readr es write_csv() y write_tsv(), con las cuales debes de tener en cosideración que siempre codifican con UTF-8, y guarda las fechas-horas en el formato establecido por la ISO8601 para su facilidad de conversión. Si deseas exportar datos a un excel tambien existe write_excel_csv()

- Class: cmd_question
  Output: como ejemplo guardaremos errores2 en un archivo CSV con la nomenclatura de la función write_csv(objeto, nombre), sustituyendo el nombre con "errores.csv"
  CorrectAnswer: write_csv(errores2, "errores2.csv")
  AnswerTests: omnitest(correctExpr='write_csv(errores2, "errores2.csv")')
  Hint: el código correcto es write_csv(errores2, "errores2.csv")
